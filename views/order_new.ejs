<%- include("partials/head.ejs") %>


<dialog id=deleteDialog>
	<form method="dialog">
	<h3>Order Deleted</h3>
	<p>We have deleted the order.</p>
	<p><a href=/order/deleted>Undo</a> (but does not restore garment details)</p>
	<button>OK</button>
</form>

</dialog>


<fieldset>
	<legend>1. Order details</legend>
	<input type=hidden id=orderId value=<%= mode=="edit" ? orderid : "0" %> />
	<details id=chooseCustomerDetails style="margin-top:2em" <% if (mode == "new" && customer == null) { %>open<% } %> >
		<input type=hidden id=selectedCustomerId value="<%= customer ? customer.CustomerId : '' %>" />
		<summary>Choose customer</summary>
		<input id=searchCustomerInput placeholder="type a code or company" autofocus />
		<table id=customerTable></table>
	</details>

	<p>Code: <span id=selectedCustomerCode>
			<%= customer ? customer.Code : '' %>
		</span> <br>
		Company: <span id=selectedCustomerCompany>
			<%= customer ? customer.Company : '' %>
		</span> <br>
		<a id=selectedCustomerLink target=_blank 
		<% if (customer) { %>
			href="/customer/edit?id=<%= customer.CustomerId %>"
		<% } else { %>
			href=#			
		<% } %>
			><%= customer ? "View/Edit" : "" %></a>
	</p>

	<section class="order-details">
		<div>
			<p>
				<label for=orderNumber>Order number</label>
				<input id=orderNumber required placeholder=required value="<%= order ? order.OrderNumber : '' %>" />
			</p>
			<p>
				<label for="salesRep">Sales Rep.</label>
				<select id="salesRep" required>
					<option value="">&mdash;choose&mdash;</option>
					<% salesReps.forEach(rep => { %>
						<option <% if (order && order.SalesRep && order.SalesRep == rep.Name) { %>selected<% } %>><%= rep.Name %> 
					<% }) %>
				</select>
			</p>
			<p>
				<label for=terms>Terms</label>
				<select id=terms>
					<option value="">—choose—</option>
					<option value="C.O.D." <%=(order && order.Terms=='C.O.D.' ) ? 'selected' : '' %> >C.O.D.</option>
					<option value="Net 7 days" <%=(order && order.Terms=='Net 7 days' ) ? 'selected' : '' %> >Net 7 days
					</option>
					<option value="Net 30 days" <%=(order && order.Terms=='Net 30 days' ) ? 'selected' : '' %> >Net 30 days
					</option>
				</select>
			</p>
			<p style="margin-top:3rem">
				<input id=repeat type=checkbox <%=order && order.Repeat && 'checked' %> /><label for=repeat>Repeat</label>
				<input id=newDesign type=checkbox <%=order && order.New && 'checked' %> /><label for=newDesign>New</label>
				<input id=buyIn type=checkbox <%=order && order.BuyIn && 'checked' %> <%= !order || 'disabled' %> /><label for=buyIn>Buy In</label> <% if (order && order.BuyIn && order.StockOrderId) { %>
						<a href="/purchasing?stockorderid=<%= order.StockOrderId %>" target="_blank"><%= order.StockOrderId %></a>
					<% } %>

			</p>
			<p id="purchaseSelectPara" style="display:none">
				<label for="purchaseSelect">Buy In — choose an existing purchase order to set the products</label>
				<select id="purchaseSelect">
					<option value="0">— Select —</option>
				</select> <a id="viewSelectedPurchaseOrder" href="#" title="open the selected purchase order in a new window">View</a>
			</p>

		</div>
		<div>
			<p id="invoiceDatePara">
				<label for=invoiceDate>Invoice Date</label>
				<input id=invoiceDate type=date
					value="<%= order && order.InvoiceDate && new Date(Date.parse(order.InvoiceDate)).toISOString().substring(0, 10) %>" />
			</p>
			<p>
				<label for=deliveryDate>Delivery Date</label>
				<input id=deliveryDate value="<%= order && order.DeliveryDate %>" />
			</p>
			<p>
				<label for=orderDate>Order date</label>
				<input id=orderDate type=date
					value="<%= order ? new Date(Date.parse(order.OrderDate)).toISOString().substring(0, 10) : new Date().toISOString().substring(0, 10) %>" />
			</p>
			<p>
				<label for=customerOrderNumber>Customer’s order number</label>
				<input id=customerOrderNumber value="<%= order ? order.CustomerOrderNumber : '' %>" />
			</p>

		</div>
	</section>
	<p style="margin-top:0">
		<label for=notes>Order Notes</label>
		<textarea id=orderNotes rows=5><%= order && order.Notes %></textarea>
	</p>


<p style="display:<%= poweruser || salesrep ? "block" : "none" %>">
	<button value="Save Order" id="saveButton">Save Order Details</button>
	<input type=reset id=deleteButton value="Delete Order" />
</p>
	<span id="detailsMessage"></span>

</fieldset>



	<div id="garmentSection">

	<h5 style="display:inline-block" >2. Choose Products</h5> (at least one is required) 

	
	<input type=button style="margin-left:5em" onclick="toggleGarments(this, event)" value="Hide Product List" />


	<table id=garmentTable class="display compact" style="width:100%">
		<thead>
			<tr>
				<th></th>
				<th>Code</th>
				<th>Type</th>
				<th>Colour</th>
				<th>Label</th>
				<th>Sizes</th>
				<th>Notes</th>
			</tr>
		</thead>
		<tbody>
		</tbody>
	</table>



	<h5>3. Product Details</h5>


	<div id="garmentApp">
		<p v-if="garments.length == 0">Select products from the table above…</p>
		<fieldset v-for="(g, i) in garments" 
				:key="g.GarmentId" 
				:ref="`selected_garment_${g.GarmentId}`">
			<legend>Product {{ i + 1 }}</legend>
			<!-- designs -->
			<div v-if="i==0"> <!-- only show designs on first product-->
				<div style="margin-top:1em;"><!-- start print design -->
					<details>
						<summary>Choose print design </summary>
						<input placeholder="start typing design code or notes — click row to select"
								@input="getPrintDesigns(g.SizeCategory)" 
								v-model="printDesignTypeAhead" />
						<table class="design-table">
							<tr v-for="item in printDesignItems" title="click to select">
								<td>
									<a href=# title="Add print design" 
											@click.prevent="selectPrintDesign($event, g, item)" 
											@keydown.enter.space.prevent="selectPrintDesign($event, g, item)" >
										<span class="fa fa-plus"  ></span>
									</a>
								</td>
								<td>{{ item.Code }}</td>
								<td>{{ item.Notes}}</td>
								<td>{{ item.Comments }}</td>
							</tr>
						</table>
					</details>

					<dl v-if="g.selectedPrintDesign" class="chosen-design">
						<dt>Code</dt>
						<dd>{{g.selectedPrintDesign.Code}}</dd>
						<dt>Notes</dt>
						<dd>{{g.selectedPrintDesign.Notes}}</dd>
						<template v-if="g.selectedPrintDesign.Comments">
						<dt>Comments</dt>
						<dd>{{g.selectedPrintDesign.Comments}}</dd>
					</template>
					</dl>

					<div style="display:flex;justify-content:space-around" 
							:ref="`${g.GarmentId}_		`">
						<fieldset v-for="(printLocation, key) in g.printLocations" :key="key[0]">
							<legend>{{key}} Screen (choose one {{printLocation.length > 1 ? ' or two' : ''}})</legend>
								<div v-for="screen in printLocation" :key="screen.ScreenPrintDesignId" >
									<p v-if="screen.Name != null">
										<input type="checkbox" @change="screenChange(g, key)" :value="screen.ScreenId"
											v-model="g.checkedScreens[key]" :id="`screen${key}${screen.ScreenId}`" />
										<label :for="`screen${key}${screen.ScreenId}`">{{screen.Name}} — {{screen.Number}} — {{screen.Colour}} </label>
									</p>
							</div>
							<hr>
							<div v-for="screen in printLocation" :key="screen.ScreenPrintDesignId" >
								<p v-if="screen.Name == null">
									<input type="checkbox" :value="screen.ScreenId" :checked="g.checkedScreens[key].length>0" :id="'screen' + screen.ScreenId" disabled>
									<label :for="'screen' + screen.ScreenId">(Standard) — {{screen.Number}} — {{screen.Colour}}  </label>
								</p>
							</div>
						</fieldset>
					</div>
				</div>

				<div><!-- start transfer design -->
					<details>
						<summary>Choose transfer design </summary>
						<input @input="getTransferDesigns(g.SizeCategory)" v-model="transferDesignTypeAhead"
							placeholder="start typing design code or notes — click row to select" />
						<table class="design-table">
							<tr v-for="item in transferDesignItems" >
								<td>
									<a href="#" title="click to select" 
											@click.prevent="selectTransferDesign($event, g, item)"
											@keydown.enter.space.prevent="selectTransferDesign($event, g, item)" >
										<span class="fa fa-plus" title="Add transfer design" ></span>
									</a>
								</td>
								<td>{{ item.Code }}</td>
								<td>{{ item.Notes}}</td>
							</tr>
						</table>
					</details>

					<dl v-if="g.selectedTransferDesign" class="chosen-design">
						<dt>Code</dt>
						<dd>{{g.selectedTransferDesign.Code}}</dd>
						<dt>Notes</dt>
						<dd>{{g.selectedTransferDesign.Notes}}</dd>
					</dl>

					<div style="display:flex;justify-content:space-around"
							:ref="`${g.GarmentId}_transferDesignLocationsDiv`">
						<fieldset v-for="(transferLocation, key) in g.transferLocations" :key="key[0]">
							<legend>{{key}} Name (choose one or two)</legend>
							<p v-for="tname in transferLocation" :key="tname.TransferNameId">
								<input type="checkbox" @change="transferNameChange(g, key, `${key}`, $event)" :data-key="key" :value="tname.TransferNameId"
									v-model="g.checkedTransferNames[key]" :id="`transferName${key}${tname.TransferNameId}`">
								<label :for="`transferName${key}${tname.TransferNameId}`">{{tname.Name}} {{ key }}</label>
							</p>
						</fieldset>
					</div>
				</div>

				<div><!-- start embroidery design -->
					<details> <!-- list of designs to choose -->
						<summary>Choose embroidery design </summary>
						<input @input="getEmbroideryDesigns(g.SizeCategory)" v-model="embroideryDesignTypeAhead"
							placeholder="start typing design code or notes — click row to select" />
						<table class="design-table">
							<tr v-for="item in embroideryDesignItems" >
								<td>
									<a href="#" title="Add embroidery design" 
											@click.prevent="selectEmbroideryDesign($event, g, item)"
											@keydown.enter.space.prevent="selectEmbroideryDesign($event, g, item)" >
										<span class="fa fa-plus"></span>
									</a>
								</td>
								<td>{{ item.Code }}</td>
								<td>{{ item.Notes}}</td>
								<td>{{ item.Comments }}</td>
							</tr>
						</table>
					</details>

					<dl v-if="g.selectedEmbroideryDesign" class="chosen-design"> <!-- details of the chosen design-->
						<dt>Code</dt>
						<dd>{{g.selectedEmbroideryDesign.Code}}</dd>
						<dt>Notes</dt>
						<dd>{{g.selectedEmbroideryDesign.Notes}}</dd>
						<template v-if="g.selectedEmbroideryDesign.Comments">
						<dt>Comments</dt>
						<dd>{{g.selectedEmbroideryDesign.Comments}}</dd>
					</template>
					</dl>

					<div style="display:flex;justify-content:space-around"
							:ref="`${g.GarmentId}_embroideryDesignLocationsDiv`"> 
						<!-- the usbs that can be chosen -->
						<fieldset v-for="(embroideryLocation, key) in g.embroideryLocations" :key="key[0]">
							<legend>{{key}} USB (choose one or two)</legend>
							<p v-for="usb in embroideryLocation" :key="usb.UsbEmbroideryDesignId">
								<input type="checkbox" @change="usbChange(g, key)" :value="usb.UsbId"
									v-model="g.checkedUsbs[key]" :id="`usb${key}${usb.UsbId}`" />
								<label :for="`usb${key}${usb.UsbId}`">{{usb.Number}} {{usb.Notes}}</label>
							</p>
						</fieldset>
					</div>

				</div>
			</div>

			<!-- product details -->
			<section>
				<p>
					<b>Code</b>: {{ g.Code }}<br>
					<b>Type</b>: {{ g.Type }}
				</p>
				<p>
					<b>Colour</b>: {{ g.Colour }}<br>
					<b>Label</b>: {{ g.Label }}
				</p>
			</section>
			<p style="margin-top:-1em" v-if="g.Notes">
				<b>Notes</b>: {{ g.Notes }}
			</p>

			<%# i decided to change this, keep in case they want it reverted  
			<table class="product-details-table" >
				<tr><th>Code<th>Type<th>Colour<th>Label
				<tr><td>{{ g.Code }}<td>{{ g.Type }}<td>{{ g.Colour }}<td>{{ g.Label }}
				<tr v-if="g.Notes" colspan="4">{{ g.Notes }}</tr>
			</table> %>

			<!-- quantities -->
			<fieldset style="margin-bottom:var(--unit)">
				<legend>Quantities ({{g.SizeCategory}})</legend>
				<div style="display:flex">
					<p class="quantity-input" 
							v-for="(data, key) in g.Quantities[g.SizeCategory]">
						<label class=quantity-label 
								:for="`${g.GarmentId}_${key}_sizeInput`" >
							{{ key == "Sm" ? "S" : key }}
						</label>
						<input type=number min="0" class="quantity-num"
								:id="`${g.GarmentId}_${key}_sizeInput`"  
								v-model="g.Quantities[g.SizeCategory][key]"  
								:ref="`${g.GarmentId}_${key}_sizeInput`" />
					</p>
				</div>
			</fieldset>
			<section class=price-section>
				<div>
					<label for="Price">{{ getGarmentQuantity(g) }} products @ Price ($)</label>
					<input id="Price" inputmode=numeric pattern="\d*\.?\d*?" v-model="g.Price"
						placeholder="add price per product">
				</div>
				<div>
					<label>= Total (for this product)</label>
					<input disabled :value="getTotalPrice(g).toLocaleString('en-AU', {style: 'currency', currency: 'AUD'})" />
				</div>
			</section>


			<section>
				<div>
<% if (poweruser || salesrep) { %>
					<button @click="saveGarment(g)" ><span v-if="g.OrderGarmentId==0" class="fa fa-solid fa-triangle-exclamation"></span> Save product</button>&emsp;<input type="reset" @click="deleteGarment(g, $event)" value="Delete product" /><br>
<% } %>
					<span v-text="errorMessage"></span>
				</div>
				<div>
					<details v-if="buyin && (g.stockWarning?.length ?? 0) > 0"><summary>Stock Warnings</summary>
						<table class="stockWarningTable">
							<caption></caption>
							<tr><th>Size</th><th>Quantity</th><th>Minimum</th></tr>
							<tr v-for="sw in g.stockWarning"><td>{{sw.size}}</td><td>{{sw.current}}</td><td>{{sw.min}}</td></tr>
						</table>
					</details>
					<p v-else>No stock warnings</p>
				</div>
			</section>
		</fieldset>
		<h4>Order total value: {{ getAllGarmentsValue() }}</h4>

	</div> <!-- end garmentApp-->

</div> <!-- end garmentSection -->

	<dialog id=success style="width: 400px" >
		<p>✅ We have saved the order </p>
		<form method="dialog">
			<button>OK</button>
		</form>
	</dialog>

	<input type=button id=printJobButton style="display:none" onclick="printJobSheet()" value="Print Job Sheet" />
<% if (poweruser || salesrep) { %>
	<input type=submit id=shipOrderButton style="display:none" onclick="shipOrder()" value="Ship Order" title="Sets done to true, will no longer display on orders page." />
<% } %>


	<% if (order) { %>
		<dl style=margin-bottom:2em>
			<dt>Created by</dt>
			<dd><%= order.CreatedBy %> on <%= order.CreatedDateTime %></dd>
			<dt>Last modified by</dt>
			<dd><%= order.LastModifiedBy %> on <%= order.LastModifiedDateTime %></dd>
		</dl>
		<a href="/auditlog?table=Orders&id=<%= order.OrderId %>" target=_blank>Audit log</a>
		<% } %>
	

	<script>

		window.sunprints = {
			mode: "<%= mode %>"
		}

		if (window.sunprints.mode == "new") {
			document.getElementById("deliveryDate").value = window.localStorage.getItem("deliveryDate")
		}

		document.getElementById("garmentSection").style.display = window.sunprints.mode == "edit" ? "block" : "none"
		document.getElementById("invoiceDatePara").style.display = window.sunprints.mode == "edit" ? "block" : "none"
		document.getElementById("printJobButton").style.display = window.sunprints.mode == "edit" ? "inline" : "none"
		const shipOrderButton = document.getElementById("shipOrderButton")
		if (shipOrderButton)
			shipOrderButton.style.display = window.sunprints.mode == "edit" ? "inline" : "none"

		// 1. Choose Customer

		document.getElementById("searchCustomerInput").addEventListener("input", function (inputEvent) {
			if (inputEvent.target.value.trim().length >= 3) {
				console.log(inputEvent.target.value.trim())
				// repopulate the table
				fetch(`/customer/ordersearch?q=${inputEvent.target.value.trim()}`)
					.then(response => {
						if (response.ok)
							return response.json()
						else {
							return response.text().then(text => { console.log(text) })
						}
					})
					.then(json => {
						const table = document.getElementById("customerTable")
						table.innerHTML = json.map(row => {
							return /*html*/`
								<tr data-id=${row.CustomerId} class=customer-row>
									<td><a href=# onclick='populateCustomer(this, event)'>Select
									<td>${row.Code}
									<td>${row.Company}
									<td>${row.Locality || ""} ${row.State || ""}`
						}).join("")
					})
			}
		})


		function populateCustomer(a, event) {
			event.preventDefault()

			const tr = a.closest("tr")

			console.log("customer selected")
			document.getElementById("selectedCustomerCode").textContent = tr.children[1].textContent
			document.getElementById("selectedCustomerCompany").textContent = tr.children[2].textContent
			const customerLink = document.getElementById("selectedCustomerLink")
			customerLink.href = `/customer/edit?id=${tr.dataset.id}`
			customerLink.textContent = "View/Edit"
			document.getElementById("selectedCustomerId").value = tr.dataset.id
			document.getElementById("searchCustomerInput").value = ""
			document.getElementById("customerTable").innerHTML = ""
			document.getElementById("chooseCustomerDetails").removeAttribute("open")
			document.getElementById("orderNumber").focus()

		}


		document.getElementById("chooseCustomerDetails").addEventListener("toggle", function (event) {
			if (event.currentTarget.open)
				document.getElementById("searchCustomerInput").focus()
		})


		document.getElementById("saveButton").addEventListener("click", function () {

			// reset the last message
			document.getElementById("detailsMessage").textContent = ""

			// validations
			const orderNumberInput = document.getElementById("orderNumber")
			if (!orderNumberInput.checkValidity()) {
				document.getElementById("detailsMessage").textContent += "❌💡 We require an order number.\n"
				return
			}

			if (document.getElementById("selectedCustomerId").value == "") {
				document.getElementById("detailsMessage").textContent += "❌ 💡 We require a customer id.\n"
				document.getElementById("chooseCustomerDetails").open = true
				return
			}

			const salesRepSelect = document.getElementById("salesRep")
			if (!salesRepSelect.checkValidity()) {
				document.getElementById("detailsMessage").textContent += "❌💡 We require a sales rep.\n"
				return
			}

			// gather the input fields into an order object
			const order = {
				CustomerId: document.getElementById("selectedCustomerId").value.trim(),
				OrderNumber: orderNumberInput.value.trim(),
				OrderDate: document.getElementById("orderDate").value || null,
				InvoiceDate: document.getElementById("invoiceDate").value || null,
				DeliveryDate: document.getElementById("deliveryDate").value.trim() || null,
				Repeat: document.getElementById("repeat").checked ? 1 : 0,
				New: document.getElementById("newDesign").checked ? 1 : 0,
				BuyIn: document.getElementById("buyIn").checked ? 1 : 0,
				SalesRep: salesRepSelect.value,
				Terms: document.getElementById("terms").value,
				Notes: document.getElementById("orderNotes").value.trim() || null,
				CustomerOrderNumber: document.getElementById("customerOrderNumber").value.trim() || null
			}
			if (window.sunprints.mode == "new") {
				order.StockOrderId = document.getElementById("purchaseSelect").value
			}



			let method = "POST"
			let url = "/order"
			if (window.sunprints.mode == "edit") {
				method = "PUT"
				url += `/${document.getElementById("orderId").value}`
			}
			
			try {
				fetch(url, {
					method,
					headers: new Headers({ "Content-Type": "application/json" }),
					body: JSON.stringify(order)
				}).then(response => {
					if (response.ok)
						return response.json()
					else {
							throw new Error(response.statusText)
					}
				})
				.then(json => {
					const successDialog = document.getElementById("success")
					successDialog.querySelector("p").textContent = "✅ We have saved the order"
					if (window.sunprints.mode == "new") {
						successDialog.addEventListener("close", function() {
							window.location.href=`/order/edit?id=${json.id}`
						})
					}
					successDialog.showModal()

					if (window.sunprints.mode == "edit") {
						window.app.setBuyIn(document.getElementById('buyIn').checked)
						document.getElementById("printJobButton").style.display = "inline"
						document.getElementById("shipOrderButton").style.display = "inline"
					}

					// save the delivery date because they want to prepopulate the next order
					window.localStorage.setItem("deliveryDate", order.DeliveryDate)
					
				})
				.catch(error => {
					window.alert (`We encountered an error: ${error}`)
					document.getElementById("detailsMessage").textContent = `❌ We encountered an error : ${error}`
				})

			}
			catch (ex) {
				document.getElementById("messages").textContent += `❌ We encountered an error: ${ex.message}`
			}

		})

		document.getElementById("deleteButton").addEventListener("click", function() {
			if (window.confirm ("We will delete this order. Continue?")) {
				fetch(`/order/${new URLSearchParams(document.location.search).get("id")}`, { method: "DELETE" })
					.then(response => {
						if (response.ok) {
							const deleteDialog = document.getElementById("deleteDialog")
							deleteDialog.addEventListener("close", () => window.location="/order")
							deleteDialog.showModal()
						}
							
						else
							throw new Error(response.statusText)
					})
					.catch(error => alert("We encountered an error: " + error))
			}
		})

		if (window.sunprints.mode == "edit") {


			// 2. Choose Garment
			// append a second row which is used for filtering columns
			const tr = document.querySelector('#garmentTable thead tr')
			const newTr = tr.cloneNode(true)
			newTr.classList.add('filters')
			tr.parentElement.appendChild(newTr);


			window.garmentDataTable = new DataTable("table#garmentTable", {
			orderCellsTop: true,
			fixedHeader: false,
			processing: true,
			serverSide: true,
			ajax: "/garment/ordersearch",
			columns: [
				{
					data: "GarmentId",
					width: "1em",
					render: (data) => {
<% if (poweruser || salesrep) { %> 
						return /*html*/`
							<a href="#" class="add-garment-link" >
								<span class="fa fa-plus fa-lg" data-id="${data}" title="Add product to order" ></span>
							</a>`
<% } else { %> 
						return ""
<% } %>
						},
					orderable: false
				},
				{ data: "Code", },
				{ data: "Type" },
				{ data: "Colour" },
				{ data: "Label" },
				{ data: "SizeCategory" },
				{ data: "Notes", orderable: false, width: "250px" },
			],
			"order": [[0, "desc"]],
			initComplete() {
				// support for filtering by column
				var api = this.api();
				// For each column
				api.columns()[0].forEach(function (i) {
					if (i == 0)
						return

					const th = Array.from(document.querySelectorAll(".filters th"))[i]
					if (i <= 4) {
						th.innerHTML = "<input placeholder=search />"
						th.querySelector("input").addEventListener("input", function () {
							api.column(i).search(this.value).draw()
							window.setTimeout(function() {
								this.focus({preventScroll:true})
							}, 20)
						})
					}
					else if (i == 5) {
						th.innerHTML = `<select style=width:4em;min-width:4em><option>Adults<option>Womens<option>Kids</select>`
						th.querySelector("select").addEventListener("input", function () {
						api.column(i).search(this.value).draw()
						window.setTimeout(function() {
							this.focus({preventScroll:true})
						}, 20)
						})
					}
					else
						th.innerHTML = ""
				})
			}
		})


		// also works on keydown for link
		$("table#garmentTable tbody").on("click", "a", function(event) {
			event.preventDefault()
			const row = window.garmentDataTable.row($(this).closest("tr"))
			addGarment(row.data())
		})

			function addGarment(data) {
				let addedGarment = app.garments.find(g => g.GarmentId == data.GarmentId)
				if (! addedGarment) {
					addedGarment = {
						OrderGarmentId: 0,
						GarmentId: data.GarmentId,
						Code: data.Code,
						Type: data.Type,
						Colour: data.Colour,
						Label: data.Label,
						SizeCategory: data.SizeCategory,
						Notes: data.Notes,
						Price: null,
						Quantities: {
							Adults: {
								XS: 0,
								Sm: 0,
								M: 0,
								L: 0,
								XL: 0,
								"2XL": 0,
								"3XL": 0,
								"4XL": 0,
								"5XL": 0,
								"6XL": 0,
								"7XL": 0,
								"8XL": 0
							},
							Womens: {
								"6": 0,
								"8": 0,
								"10": 0,
								"12": 0,
								"14": 0,
								"16": 0,
								"18": 0,
								"20": 0,
								"22": 0,
								"24": 0,
								"26": 0,
								"28": 0
							},
							Kids: {
								"0": 0,
								"1": 0,
								"2": 0,
								"4": 0,
								"6": 0,
								"8": 0,
								"10": 0,
								"12": 0,
								"14": 0,
								"16": 0
							}
						},
						selectedPrintDesign: null,
						selectedEmbroideryDesign: null,
						selectedTransferDesign: null,
					}
					app.addGarment(addedGarment)
				}
				window.setTimeout(() => {
					// get the first size of the garment's size category
					const firstSize = Object.keys(addedGarment.Quantities[addedGarment.SizeCategory])[0]
					// we prevent scroll so we can scroll with smooth behaviour
					app.$refs[`${data.GarmentId}_${firstSize}_sizeInput`][0].focus({preventScroll:true})
					// bring the garment into view
					app.$refs[`selected_garment_${addedGarment.GarmentId}`][0].scrollIntoView({behavior: "smooth"})
					}, 10) 

		}


			window.app = Vue.createApp({
				data() {
					return {
						garments: <%- JSON.stringify(garments) %>,
						printDesignItems: [],
						printDesignTypeAhead: "",
						embroideryDesignItems: [],
						embroideryDesignTypeAhead: "",
						transferDesignItems: [],
						transferDesignTypeAhead: "",
						errorMessage: "",
						buyin: document.getElementById("buyIn").checked
					}
				},
				methods: {
					addGarment(garment) {
						this.garments.push(garment)
					},
					getPrintDesigns(sizeCategory) {
						if (this.printDesignTypeAhead.trim().length >= 3) {
							fetch(`/print/ordersearch?q=${this.printDesignTypeAhead.trim()}&sizes=${sizeCategory}`)
								.then(response => {
									if (response.ok)
										return response.json()
									else
										throw new Error(response.statusText)
								})
								.then(json => {
									this.printDesignItems = json
								})
								.catch(error => window.alert(`We encountered an error: ${error}`))
						}
					},
					getEmbroideryDesigns(sizeCategory) {
						if (this.embroideryDesignTypeAhead.trim().length >= 3) {
							fetch(`/embroidery/ordersearch?q=${this.embroideryDesignTypeAhead.trim()}&sizes=${sizeCategory}`)
								.then(response => {
									if (response.ok)
										return response.json()
									else
										throw new Error(response.statusText)
							})
							.then(json => {
								this.embroideryDesignItems = json
							})
							.catch(error => window.alert(`We encountered an error: ${error}`))
						}
					},
					getTransferDesigns(sizeCategory) {
						if (this.transferDesignTypeAhead.trim().length >= 3) {
							try {
							fetch(`/transfer/design/ordersearch?q=${this.transferDesignTypeAhead.trim()}&sizes=${sizeCategory}`)
								.then(response => {
									if (response.ok)
										return response.json()
									else
										throw new Error (response.statusText)
								})
								.then(json => {
									this.transferDesignItems = json
								})
								.catch(error => window.alert(`We encountered an error: ${error}`))
							}
							catch(ex) {
								window.alert(`We encountered an error: ${ex.message}`)
							}
						}
					},
					selectPrintDesign(event, garment, item) {
						// add to garment
						garment.selectedPrintDesign = {
							Code: item.Code,
							Notes: item.Notes,
							Comments: item.Comments,
							PrintDesignId: item.PrintDesignId
						}
						// reset ui
						event.currentTarget.closest("details").removeAttribute("open")
						this.printDesignItems = []
						this.printDesignTypeAhead = ""

						// populate screen and location
						garment.printLocations = {} // locations will be for our checkboxes

						const locationNames = <%- JSON.stringify(locations) %>;
						garment.checkedScreens = {}
						locationNames.forEach(loc => garment.checkedScreens[loc] = [])

						const vue = this
						fetch(`/screen/ordersearch?printdesignid=${garment.selectedPrintDesign.PrintDesignId}&sizes=${garment.SizeCategory}`).
							then(response => {
								if (response.ok)
									return response.json()
								else
									throw new Error(response.statusText)
								})
							.then(json => {
								json.forEach(j => {
									locationNames.forEach(loc => {
										if (j[loc] == 1)
											// if we have this location, push it, otherwise, create a new array for it
											garment.printLocations[loc] ? garment.printLocations[loc].push(j) : garment.printLocations[loc] = [j]
									})
								})
								// set focus to first checkbox
								vue.$nextTick(function() {
										const cb = vue.$refs[`${garment.GarmentId}_printDesignLocationsDiv`][0].querySelector("input[type=checkbox]")
										if (cb) 
											cb.focus()
								})
							})
							.catch(error => window.alert(`We encountered an error: ${error}`))
					},
					selectEmbroideryDesign(event, garment, item) {
						// add to garment
						garment.selectedEmbroideryDesign = {
							Code: item.Code,
							Notes: item.Notes,
							Comments: item.Comments,
							EmbroideryDesignId: item.EmbroideryDesignId
						}
						// reset ui
						event.currentTarget.closest("details").removeAttribute("open")
						this.embroideryDesignItems = []
						this.embroideryDesignTypeAhead = ""

						// populate usb and location
						garment.embroideryLocations = {} // locations will be for our checkboxes

						const locationNames = <%- JSON.stringify(locations) %>;
						garment.checkedUsbs = {}
						locationNames.forEach(name => garment.checkedUsbs[name] = [])

						const vue = this
						fetch(`/embroidery/usb/ordersearch?embroiderydesignid=${garment.selectedEmbroideryDesign.EmbroideryDesignId}&sizes=${garment.SizeCategory}`)
						.then(response => {
								if (response.ok)
									return response.json()
								else {
									console.log("error", response)
									throw new Error(response.statusText)
								}
								})
						.then(json => {
							json.forEach(j => {
								locationNames.forEach(name => {
									if (j[name] == 1)
										garment.embroideryLocations[name]
											? garment.embroideryLocations[name].push(j)
											: garment.embroideryLocations[name] = [j]
								})
							})
							// set focus to first checkbox
							vue.$nextTick(function() {
								const cb = vue.$refs[`${garment.GarmentId}_embroideryDesignLocationsDiv`][0].querySelector("input[type=checkbox]")
							if (cb) 
								cb.focus()
							})
						})
						.catch(error => window.alert(`We encountered an error: ${error}`))
					},
					selectTransferDesign(event, garment, item) {
						// add to garment
						garment.selectedTransferDesign = {
							Code: item.Code,
							Notes: item.Notes,
							TransferDesignId: item.TransferDesignId
						}
						// reset ui
						event.currentTarget.closest("details").removeAttribute("open")
						this.TransferDesignItems = []
						this.TransferDesignTypeAhead = ""

						// populate transfer name and location
						garment.transferLocations = {} // locations will be for our checkboxes

						const locationNames = <%- JSON.stringify(locations) %>;
						garment.checkedTransferNames = {}
						locationNames.forEach(name => garment.checkedTransferNames[name] = [])

						const vue = this
						try {
							fetch(`/transfer/name/ordersearch?transferdesignid=${garment.selectedTransferDesign.TransferDesignId}&sizes=${garment.SizeCategory}`).
								then(response => {
									if (response.ok)
										return response.json()
									else
										throw new Error(response.statusText)
								})
								.then(json => {
									console.log("transfer names", json)
									json.forEach(j => {
										locationNames.forEach(name => {
											if (j[name] == 1)
												garment.transferLocations[name]
													? garment.transferLocations[name].push(j)
													: garment.transferLocations[name] = [j]
										})
									})
									// set focus to first checkbox
									vue.$nextTick(function() {
										const cb = vue.$refs[`${garment.GarmentId}_transferDesignLocationsDiv`][0].querySelector("input[type=checkbox]")
									if (cb) 
										cb.focus()
									})
								})
								.catch(error => window.alert(`We encountered an error: ${error}`))
						}
						catch(ex) {
							window.alert(`We encountered an error: ${ex.message}`)
						}
					},
					screenChange(garment, key) {
						if (garment.checkedScreens[key].length > 2)
							garment.checkedScreens[key].shift()
					},
					usbChange(garment, key) {
						if (garment.checkedUsbs[key].length > 2)
							garment.checkedUsbs[key].shift()
					},
					transferNameChange(garment, key, more, event) {
						if (garment.checkedTransferNames[key].length > 2)
							garment.checkedTransferNames[key].shift()
					},
					getGarmentQuantity(garment) {
						let quantity = 0
						for (var q in garment.Quantities.Adults) {
							quantity += Number(garment.Quantities.Adults[q])
						}
						for (var q in garment.Quantities.Womens) {
							quantity += Number(garment.Quantities.Womens[q])
						}
						for (var q in garment.Quantities.Kids) {
							quantity += Number(garment.Quantities.Kids[q])
						}
						return quantity

					},
					getTotalPrice(garment) {
						if (Number(garment.Price)) {
							return Number(garment.Price) * Number(this.getGarmentQuantity(garment))
						}
						else
							return 0
					},
					getAllGarmentsValue() {
						let val = 0
						this.garments.forEach(g => val += this.getTotalPrice(g))
						return val.toLocaleString('en-AU', {style: 'currency', currency: 'AUD'})
						// if (val) {
						// 	let ret = val?.toFixed(2)
						// 	if (ret.includes("e")) // it's a pain when this happens, 
						// 		ret =  "0" 
						// 	return  ret
						// }
						// else 
						// 	return ""
					},
					saveGarment(garment) {
							console.log(`saving garment id !${JSON.stringify(garment)}!`)
							const requestBody = {
								OrderGarmentId: garment.OrderGarmentId,
								OrderId: document.getElementById("orderId").value,
								GarmentId: garment.GarmentId,
								Price: garment.Price,
								quantities: {},
								sizeCategory: garment.SizeCategory,
								printDesignId: garment.selectedPrintDesign?.PrintDesignId || null,
								embroideryDesignId: garment.selectedEmbroideryDesign?.EmbroideryDesignId || null,
								transferDesignId: garment.selectedTransferDesign?.TransferDesignId || null,
								checkedScreens: garment.checkedScreens || null,
								checkedUsbs: garment.checkedUsbs || null,
								checkedTransferNames: garment.checkedTransferNames || null
							}
							let count = 0
							for (size in garment.Quantities[garment.SizeCategory]) {
								requestBody.quantities[size] = garment.Quantities[garment.SizeCategory][size]
								count += requestBody.quantities[size]
							}
							if (count == 0) {
								this.errorMessage = "❌ We require some product sizes"
								return
							}

							console.log(requestBody)
							fetch(`/order/${document.getElementById("orderId").value}/garment`, {
								method: "POST",
								headers: new Headers({ "Content-Type": "application/json" }),
								body: JSON.stringify(requestBody)
							})
							.then(response => {
								if (response.ok)
									return response.json()
								else
									throw new Error(response.statusText)
							})
							.then(json => {
								if (garment.OrderGarmentId == 0)
									garment.OrderGarmentId = json.OrderGarmentId
								const successDialog = document.getElementById("success")
								successDialog.querySelector("p").textContent = "We have saved the product to this order"
								successDialog.showModal()
								garment.stockWarning = json.warnings ? json.warnings : ""
								

							})
							.catch(error => window.alert(`We encountered an error: ${error}`))

					},
					deleteGarment(garment, event) {
						event.preventDefault()
						console.log(`deleting garment id !${JSON.stringify(garment)}!`)
						const vue = this
						if (garment.OrderGarmentId == 0) {
							// this isn't perfect, if there are two garments the same not yet saved, it might not remove the right one
							this.garments.splice( this.garments.findIndex(g => g.OrderGarmentId == 0 && g.GarmentId == garment.GarmentId)  , 1)
							return
						}
						fetch(`/order/garment/${garment.OrderGarmentId}`, { method: "DELETE" })
							.then(response => {
								if (response.ok)
									return response.text()
								else
									throw new Error(response.statusText)
							})
							.then(text => {
								vue.garments.splice( vue.garments.findIndex(g => g.GarmentId == garment.GarmentId)  , 1)
							})
							.catch(error => window.alert(`We encountered an error: ${error}`))
					},
					setBuyIn(val) {
						this.buyin = val
					},
					sortByName(printLocation) {
						// sort by name, if they're the same, sort by number, if they're the same, sort by colour
						return printLocation.sort(function(a, b) {
							if (a.Name?.toUpperCase() ?? "" < b.Name?.toUpperCase() ?? "")
								return -1
							else if (a.Name?.toUpperCase() ?? "" > b.Name?.toUpperCase() ?? "")
								return 1
							else {
								if (a.Number.toUpperCase() ?? "" < b.Number.toUpperCase() ?? "")
									return -1
								else if (a.Number.toUpperCase() ?? "" > b.Number.toUpperCase() ?? "")
									return 1
								else {
									if (a.Colour.toUpperCase() ?? "" < b.Colour.toUpperCase() ?? "")
										return -1
									else if (a.Colour.toUpperCase() ?? "" > b.Colour.toUpperCase() ?? "")
										return 1
								}
							}
						})
						
					}
				}

			})
			.mount("#garmentApp")


			function printJobSheet(event) {
				window.open(`/order/jobsheet/${document.getElementById("orderId").value}`)
			}


			function shipOrder() {
			console.log("ship")
			fetch(`/order/ship/${document.getElementById("orderId").value}`, { method: "PUT" })
			.then(response => {
				if (response.ok) {
					return response.text()
				}
				else {
					throw new Error(response.statusText)
				}
			})
			.then(text => {
				const successDialog = document.getElementById("success")
				successDialog.querySelector("p").textContent = "✅ We have shipped the order"
				successDialog.addEventListener("close", function() {
					window.location.href=`/order`
				})
				successDialog.showModal()
			})
			.catch(error => window.alert(`We encountered an error: ${error}`)) 


		}

			function toggleGarments(button, event) {
			event.preventDefault()
			if (button.value.startsWith("Hide")) {
				document.getElementById("garmentTable_wrapper").style.display = "none"
				button.value = "Show Product List"
			}
			else {
				document.getElementById("garmentTable_wrapper").style.display = "block"
				button.value = "Hide Product List"
			}
		}

		}
		else {
			// mode could be anything, treat as if "new"
			document.getElementById("buyIn").addEventListener("change", function() {
				document.getElementById("purchaseSelectPara").style.display = this.checked ? "block" : "none"
				
				const select = document.getElementById("purchaseSelect")

				if (this.checked && select.options.length == 1) {
					fetch("/stockorder")
					.then(response => {
						if (response.ok)
							return response.json()
						else
							throw new Error(response.text())
					})
					.then(json => {
						json.forEach(po => {
							const option = document.createElement("option")
							option.text = `${po.StockOrderId} ${new Date(Date.parse(po.OrderDate)).toLocaleDateString("en-AU")} ${po.Company}`
							option.value = po.StockOrderId
							select.add(option)
						})
					})
					.catch(error => window.alert(`We encountered an error: ${error.message}`))
				}
			})
		
					
			document.getElementById ("viewSelectedPurchaseOrder").addEventListener("click", function() {
				this.preventDefault
				const select = document.getElementById("purchaseSelect")
				if (select.value != 0) {
					window.open(`/purchasing?id=${select.value}`, "_blank")
				}
				
			})

		
		}
	</script>





	<%- include("partials/foot.ejs") %>