<%- include("partials/head.ejs") %>

<style>
.design-table  {
	cursor: pointer;
	min-width: unset;
	width: unset;
}

section { 
  grid-template-columns: auto auto;
}

.breakall {
	word-break: break-all;
}

input:invalid {
  border: 2px dashed red;
}

.wide-column {
  width: 250px
}

.dataTables_wrapper .dataTables_filter {
  text-align: revert;
}

#garmentTable_filter {
  display: none

}

.selected-garment button {
	margin-bottom: 0;
}

section.price-section {
  margin-bottom: 2em;
}

 

button+button, button+input[type=reset], input[type=submit]+button {
	margin-left: 2em;
}

table#stockWarningTable {
	min-width: unset;
	width: unset;
}

#shipOrderButton {
	margin-left: 2em;
}

</style>


<fieldset>
	<legend>1. Order details</legend>
	<input type=hidden id=orderId value=<%= mode=="edit" ? orderid : "0" %> />
	<details id=chooseCustomerDetails style="margin-top:2em" <% if (mode == "new" && customer == null) { %>open<% } %> >
		<input type=hidden id=selectedCustomerId value="<%= customer ? customer.CustomerId : '' %>" />
		<summary>Choose customer</summary>
		<input id=searchCustomerInput placeholder="type a code or company" autofocus />
		<table id=customerTable></table>
	</details>

	<p>Code: <span id=selectedCustomerCode>
			<%= customer ? customer.Code : '' %>
		</span><br>
		Company: <span id=selectedCustomerCompany>
			<%= customer ? customer.Company : '' %>
		</span>
	</p>

	<section class="order-details">
		<div>
			<p>
				<label for=customerOrderNumber>Customer’s order number</label>
				<input id=customerOrderNumber value="<%= order ? order.CustomerOrderNumber : '' %>" />
			</p>
			<p>
				<label for=orderNumber>Order number</label>
				<input id=orderNumber required placeholder=required value="<%= order ? order.OrderNumber : '' %>" />
			</p>
			<p>
				<label for=orderDate>Order date</label>
				<input id=orderDate type=date
					value="<%= order ? new Date(Date.parse(order.OrderDate)).toISOString().substring(0, 10) : new Date().toISOString().substring(0, 10) %>" />
			</p>
			<p>
				<input id=repeat type=checkbox <%=order && order.Repeat && 'checked' %> /><label for=repeat>Repeat</label>
				<input id=newDesign type=checkbox <%=order && order.New && 'checked' %> /><label for=newDesign>New</label>
				<input id=buyIn type=checkbox <%=order && order.BuyIn && 'checked' %> /><label for=buyIn>Buy In</label>
			</p>
		</div>
		<div>
			<p>
				<label for=terms>Terms</label>
				<select id=terms required>
					<option value="">—choose—</option>
					<option value="C.O.D." <%=(order && order.Terms=='C.O.D.' ) ? 'selected' : '' %> >C.O.D.</option>
					<option value="Nett 7 days" <%=(order && order.Terms=='Nett 7 days' ) ? 'selected' : '' %> >Nett 7 days
					</option>
					<option value="Net 30 days" <%=(order && order.Terms=='Nett 30 days' ) ? 'selected' : '' %> >Net 30 days
					</option>
				</select>
			</p>
			<p>
				<label for="salesRep">Sales Rep.</label>
				<select id="salesRep">
					<option value=0>&mdash;choose&mdash;</option>
					<% salesReps.forEach(rep => { %>
						<option <% if (order && order.SalesRep && order.SalesRep == rep.Name) { %>selected<% } %>><%= rep.Name %> 
					<% }) %>
				</select>
				
			</p>
			<p id="invoiceDatePara">
				<label for=invoiceDate>Invoice Date</label>
				<input id=invoiceDate type=date
					value="<%= order && order.InvoiceDate && new Date(Date.parse(order.InvoiceDate)).toISOString().substring(0, 10) %>" />
			</p>
			<p>
				<label for=deliveryDate>Delivery Date</label>
				<input id=deliveryDate value="<%= order && order.DeliveryDate %>" />
			</p>

		</div>
	</section>

	<p>
	<label for=notes>Order Notes</label>
	<textarea id=orderNotes rows=5><%= order && order.Notes %></textarea>
	</p>


	<button value="Save Order" id="saveButton">Save Order Details</button> <span id="detailsMessage"></span>

</fieldset>



	<div id="garmentSection">

	<h5 style="display:inline-block" >2. Choose garments</h5> <input type=button style="margin-left:5em" onclick="toggleGarments(this, event)" value="Hide Garment List" />

	<table id=garmentTable class=hover style="width:100%">
		<thead>
			<tr>
				<th></th>
				<th>Code</th>
				<th>Type</th>
				<th>Colour</th>
				<th>Label</th>
				<th>Sizes</th>
				<th>Notes</th>
			</tr>
		</thead>
		<tbody>
		</tbody>
	</table>



	<h5>3. Garment Details</h5>


	<div id="garmentApp">
		<p v-if="garments.length == 0">Select garments from the table above…</p>
		<div v-for="g in garments" class="selected-garment" :key="g.GarmentId" style="border: 1px black solid; padding: 1em; margin-bottom: 1em">
			<dl>
				<dt>Code</dt>
				<dd> {{ g.Code }}</dd>
				<dt>Type</dt>
				<dd>{{ g.Type }} </dd>
				<dt>Colour</dt>
				<dd>{{ g.Colour }} </dd>
				<dt>Label</dt>
				<dd>{{ g.Label }} </dd>
				<template v-if="g.Notes">
					<dt>Notes</dt>
					<dd>{{ g.Notes }} </dd>
				</template>
			</dl>
			<fieldset>
				<legend>Quantities ({{g.SizeCategory}})</legend>
				<div style="display:flex">
					<p v-for="(data, key) in g.Quantities[g.SizeCategory]">
						<label :for="key" class=quantity-label> {{ key }}</label>
						<input type=number id="key" min="0" v-model="g.Quantities[g.SizeCategory][key]" class="quantity-num" />
					</p>
				</div>
			</fieldset>
			<section class=price-section>
				<div>
					<label for="Price">{{ getGarmentQuantity(g) }} garments @ Price ($)</label>
					<input id="Price" inputmode=numeric pattern="\d*\.?\d*?" v-model="g.Price"
						placeholder="add price per garment">
				</div>
				<div>
					<label>= Total (for this garment)</label>
					<input disabled :value="getTotalPrice(g).toFixed(2)" />
				</div>
			</section>

			<!-- print design -->
			<details>
				<summary>Choose print design </summary>
				<input @input="getPrintDesigns(g.SizeCategory)" v-model="printDesignTypeAhead"
					placeholder="start typing design code or notes — click row to select" />
				<table class="design-table">
					<tr v-for="item in printDesignItems" @click="selectPrintDesign($event, g)" :data-id="item.PrintDesignId" title="click to select">
						<td><span class="fa fa-plus" title="Add print design" ></span></td>
						<td>{{ item.Code }}</td>
						<td>{{ item.Notes}}</td>
						<td>{{ item.Comments }}</td>
					</tr>
				</table>
			</details>

			<dl v-if="g.selectedPrintDesign" class="chosen-design">
				<dt>Code</dt>
				<dd>{{g.selectedPrintDesign.Code}}</dd>
				<dt>Notes</dt>
				<dd>{{g.selectedPrintDesign.Notes}}</dd>
				<template v-if="g.selectedPrintDesign.Comments">
				<dt>Comments</dt>
				<dd>{{g.selectedPrintDesign.Comments}}</dd>
			</template>
			</dl>

			<div style="display:flex;justify-content:space-around">
				<fieldset v-for="(printLocation, key) in g.printLocations" :key="key[0]">
					<legend>{{key}} Screen (choose one{{printLocation.length > 1 ? ' or two' : ''}})</legend>
					<p v-for="screen in printLocation" :key="screen.ScreenPrintDesignId">
						<input type="checkbox" @change="screenChange(g, key)" :value="screen.ScreenId"
							v-model="g.checkedScreens[key]" :id="'screen' + screen.ScreenId">
						<label :for="'screen' + screen.ScreenId">{{screen.Number}} {{screen.Name}} {{screen.Colour}}</label>
					</p>
				</fieldset>
			</div>

			<!-- transfer design -->
			<details>
				<summary>Choose transfer design </summary>
				<input @input="getTransferDesigns(g.SizeCategory)" v-model="transferDesignTypeAhead"
					placeholder="start typing design code or notes — click row to select" />
				<table class="design-table">
					<tr v-for="item in transferDesignItems" @click="selectTransferDesign($event, g)"
						:data-id="item.TransferDesignId">
						<td><span class="fa fa-plus" title="Add transfer design" ></span></td>
						<td>{{ item.Code }}</td>
						<td>{{ item.Notes}}</td>
					</tr>
				</table>
			</details>

			<dl v-if="g.selectedTransferDesign" class="chosen-design">
				<dt>Code</dt>
				<dd>{{g.selectedTransferDesign.Code}}</dd>
				<dt>Notes</dt>
				<dd>{{g.selectedTransferDesign.Notes}}</dd>
			</dl>

			<div style="display:flex;justify-content:space-around">
				<fieldset v-for="(location, key) in g.transferLocations">
					<legend>{{key}} (choose one or two)</legend>
					<p v-for="locName in location" :key="locName.TransferNameTransferDesignId">
						<input type="checkbox" @change="transferNameChange(g, key)" :value="locName.TransferNameTransferDesignId"
							v-model="g.checkedTransferNames[key]" :id="'transferName' + locName.TransferNameTransferDesignId">
						<label :for="'transferName' + locName.TransferNameTransferDesignId">{{locName.Name}}</label>
					</p>
				</fieldset>
			</div>
			


			<!-- embroidery design -->
			<details>
				<summary>Choose embroidery design </summary>
				<input @input="getEmbroideryDesigns(g.SizeCategory)" v-model="embroideryDesignTypeAhead"
					placeholder="start typing design code or notes — click row to select" />
				<table class="design-table">
					<tr v-for="item in embroideryDesignItems" @click="selectEmbroideryDesign($event, g)"
						:data-id="item.EmbroideryDesignId">
						<td><span class="fa fa-plus" title="Add embroidery design" ></span></td>
						<td>{{ item.Code }}</td>
						<td>{{ item.Notes}}</td>
						<td>{{ item.Comments }}</td>
					</tr>
				</table>
			</details>

			<dl v-if="g.selectedEmbroideryDesign" class="chosen-design">
				<dt>Code</dt>
				<dd>{{g.selectedEmbroideryDesign.Code}}</dd>
				<dt>Notes</dt>
				<dd>{{g.selectedEmbroideryDesign.Notes}}</dd>
				<template v-if="g.selectedEmbroideryDesign.Comments">
				<dt>Comments</dt>
				<dd>{{g.selectedEmbroideryDesign.Comments}}</dd>
			</template>
			</dl>

			<div style="display:flex;justify-content:space-around">
				<fieldset v-for="(location, key) in g.embroideryLocations">
					<legend>{{key}} (choose one or two)</legend>
					<p v-for="usb in location" :key="usb.UsbEmbroideryDesignId">
						<input type="checkbox" @change="usbChange(g, key)" :value="usb.UsbEmbroideryDesignId"
							v-model="g.checkedUsbs[key]" :id="'usb' + usb.UsbEmbroideryDesignId">
						<label :for="'usb' + usb.UsbEmbroideryDesignId">{{usb.Number}} {{usb.Notes}}</label>
					</p>
				</fieldset>
			</div>
			<p>
				<button @click="saveGarment(g)">Save garment</button>&emsp;<input type="reset" @click="deleteGarment(g, $event)" value="Delete garment" /><br>
				<span v-text="errorMessage"></span>
			</p>
			<table v-if="buyin && g.stockWarning" id="stockWarningTable">
				<caption>Stock Warnings</caption>
				<tr><th>Size</th><th>Quantity</th><th>Minimum</th></tr>
				<tr v-for="sw in g.stockWarning"><td>{{sw.size}}</td><td>{{sw.current}}</td><td>{{sw.min}}</td></tr>
			</table>
		</div>
		<h4>Order total value: ${{ getAllGarmentsValue() }}</h4>

	</div> <!-- end garmentApp-->

</div> <!-- end garmentSection -->

	<dialog id=success style="width: 400px" >
		<p>✅ We have saved the order </p>
		<form method="dialog">
			<button>OK</button>
		</form>
	</dialog>

	<input type=button id=printJobButton style="display:none" onclick="printJobSheet()" value="Print Job Sheet" />
	<input type=submit id=shipOrderButton style="display:none" onclick="shipOrder()" value="Ship Order" title="Sets done to true, will no longer display on orders page." />

	<script>

		window.sunprints = {
			mode: "<%= mode %>"
		}

		document.getElementById("garmentSection").style.display = window.sunprints.mode == "edit" ? "block" : "none"
		document.getElementById("invoiceDatePara").style.display = window.sunprints.mode == "edit" ? "block" : "none"
		document.getElementById("printJobButton").style.display = window.sunprints.mode == "edit" ? "inline" : "none"
		document.getElementById("shipOrderButton").style.display = window.sunprints.mode == "edit" ? "inline" : "none"

		// 1. Choose Customer

		document.getElementById("searchCustomerInput").addEventListener("input", function (inputEvent) {
			if (inputEvent.target.value.trim().length >= 3) {
				console.log(inputEvent.target.value.trim())
				// repopulate the table
				fetch(`/customer/ordersearch?q=${inputEvent.target.value.trim()}`)
					.then(response => {
						if (response.ok)
							return response.json()
						else {
							return response.text().then(text => { console.log(text) })
						}
					})
					.then(json => {
						const table = document.getElementById("customerTable")
						table.innerHTML = json.map(row => {
							return `<tr onclick='populateCustomer(this)' data-id=${row.CustomerId} class=customer-row><td>${row.Code}<td>${row.Company}<td>${row.Locality || ""} ${row.State || ""}`
						}).join("")
					})
			}
		})


		function populateCustomer(tr) {
			console.log("customer selected")
			document.getElementById("selectedCustomerCode").textContent = tr.children[0].textContent
			document.getElementById("selectedCustomerCompany").textContent = tr.children[1].textContent
			document.getElementById("selectedCustomerId").value = tr.dataset.id
			document.getElementById("chooseCustomerDetails").removeAttribute("open")
			document.getElementById("searchCustomerInput").value = ""
			document.getElementById("customerTable").innerHTML = ""

		}


		document.getElementById("chooseCustomerDetails").addEventListener("toggle", function (event) {
			if (event.currentTarget.open)
				document.getElementById("searchCustomerInput").focus()
		})


		document.getElementById("saveButton").addEventListener("click", function () {

			// reset the last message
			document.getElementById("detailsMessage").textContent = ""

			// validations
			const orderNumberInput = document.getElementById("orderNumber")
			if (!orderNumberInput.checkValidity()) {
				document.getElementById("detailsMessage").textContent += "❌💡 We require an order number.\n"
				return
			}

			if (document.getElementById("selectedCustomerId").value == "") {
				document.getElementById("detailsMessage").textContent += "❌ 💡 We require a customer id.\n"
				document.getElementById("chooseCustomerDetails").open = true
				return
			}


			// gather the input fields into an order object
			const order = {
				CustomerId: document.getElementById("selectedCustomerId").value.trim(),
				OrderNumber: orderNumberInput.value.trim(),
				OrderDate: document.getElementById("orderDate").value || null,
				InvoiceDate: document.getElementById("invoiceDate").value || null,
				DeliveryDate: document.getElementById("deliveryDate").value.trim() || null,
				Repeat: document.getElementById("repeat").checked ? 1 : 0,
				New: document.getElementById("newDesign").checked ? 1 : 0,
				BuyIn: document.getElementById("buyIn").checked ? 1 : 0,
				SalesRep: document.getElementById("salesRep").value,
				Terms: document.getElementById("terms").value,
				Notes: document.getElementById("orderNotes").value.trim() || null,
				CustomerOrderNumber: document.getElementById("customerOrderNumber").value.trim() || null,
			}


			let method = "POST"
			let url = "/order"
			if (window.sunprints.mode == "edit") {
				method = "PUT"
				url += `/${document.getElementById("orderId").value}`
			}
			
			try {
				fetch(url, {
					method,
					headers: new Headers({ "Content-Type": "application/json" }),
					body: JSON.stringify(order)
				}).then(response => {
					if (response.ok)
						return response.json()
					else {
							throw new Error(response.statusText)
					}
				})
				.then(json => {
					const successDialog = document.getElementById("success")
					successDialog.querySelector("p").textContent = "✅ We have saved the order"
					if (window.sunprints.mode == "new") {
						successDialog.addEventListener("close", function() {
							window.location.href=`/order/edit?id=${json.id}`
						})
					}
					successDialog.showModal()

					if (window.sunprints.mode == "edit") {
						window.app.setBuyIn(document.getElementById('buyIn').checked)
						document.getElementById("printJobButton").style.display = "inline"
						document.getElementById("shipOrderButton").style.display = "inline"
					}
					
				})
				.catch(error => {
					window.alert (`We encountered an error: ${error}`)
					document.getElementById("detailsMessage").textContent = `❌ We encountered an error : ${error}`
				})

			}
			catch (ex) {
				document.getElementById("messages").textContent += `❌ We encountered an error: ${ex.message}`
			}

		})


		if (window.sunprints.mode == "edit") {


		// 2. Choose Garment
		// append a second row which is used for filtering columns
		const tr = document.querySelector('#garmentTable thead tr')
		const newTr = tr.cloneNode(true)
		newTr.classList.add('filters')
		tr.parentElement.appendChild(newTr);


		window.garmentDataTable = new DataTable("table#garmentTable", {
			orderCellsTop: true,
			fixedHeader: false,
			processing: true,
			serverSide: true,
			ajax: "/garment/ordersearch",
			columns: [
				{
					data: "GarmentId",
					width: "1em",
					render: (data) => {
						return `<a href=# class=add-garment-link ><span class="fa fa-plus   fa-lg" data-id=${data} title="Add garment to order" onclick="addGarment(${data}, event)" ></span></a>`
					},
					orderable: false
				},
				{ data: "Code", },
				{ data: "Type" },
				{ data: "Colour" },
				{ data: "Label" },
				{ data: "SizeCategory" },
				{ data: "Notes", orderable: false, width: "250px" },
			],
			"order": [[0, "desc"]],
			initComplete() {
				// support for filtering by column
				var api = this.api();
				// For each column
				api.columns()[0].forEach(function (i) {
					if (i == 0)
						return

					const th = Array.from(document.querySelectorAll(".filters th"))[i]
					if (i <= 4) {
						th.innerHTML = "<input placeholder=search />"
						th.querySelector("input").addEventListener("input", function () {
							api.column(i).search(this.value).draw()
							window.setTimeout(function() {
								this.focus({preventScroll:true})
							}, 20)
						})
					}
					else if (i == 5) {
						th.innerHTML = `<select style=width:4em;min-width:4em><option>Adults<option>Womens<option>Kids</select>`
						th.querySelector("select").addEventListener("input", function () {
						api.column(i).search(this.value).draw()
						window.setTimeout(function() {
							this.focus({preventScroll:true})
						}, 20)
						})
					}
					else
						th.innerHTML = ""
				})
			}
		})


		//$("table#garmentTable").on('click', 'button.select-garment', function (btn, event) {
			function addGarment(id) {
				const data = garmentDataTable.row(`#row-${id}`).data()
				if (!app.garments.some(g => g.GarmentId == data.GarmentId)) {
					app.addGarment({
					OrderGarmentId: 0,
					GarmentId: data.GarmentId,
					Code: data.Code,
					Type: data.Type,
					Colour: data.Colour,
					Label: data.Label,
					SizeCategory: data.SizeCategory,
					Price: null,
					Quantities: {
						Adults: {
							XS: 0,
							Sm: 0,
							M: 0,
							L: 0,
							XL: 0,
							"2XL": 0,
							"3XL": 0,
							"4XL": 0,
							"5XL": 0,
							"6XL": 0,
							"7XL": 0,
							"8XL": 0
						},
						Womens: {
							"6": 0,
							"8": 0,
							"10": 0,
							"12": 0,
							"14": 0,
							"16": 0,
							"18": 0,
							"20": 0,
							"22": 0,
							"24": 0,
							"26": 0,
							"28": 0
						},
						Kids: {
							"0": 0,
							"1": 0,
							"2": 0,
							"4": 0,
							"6": 0,
							"8": 0,
							"10": 0,
							"12": 0,
							"14": 0,
							"16": 0
						}
					},
					selectedPrintDesign: null,
					selectedEmbroideryDesign: null,
					selectedTransferDesign: null,
				})
					window.setTimeout(() => {Array.from(document.querySelectorAll("div.selected-garment")).pop().scrollIntoView({behavior: "smooth"})}, 10) // :last-child doesn't seem to work
			}
		}
		//)

		window.app = Vue.createApp({
			data() {
				return {
					garments: <%- JSON.stringify(garments) %>,
					printDesignItems: [],
					printDesignTypeAhead: "",
					embroideryDesignItems: [],
					embroideryDesignTypeAhead: "",
					transferDesignItems: [],
					transferDesignTypeAhead: "",
					errorMessage: "",
					buyin: document.getElementById("buyIn").checked
				}
			},
			methods: {
				addGarment(garment) {
					this.garments.push(garment)
				},
				getPrintDesigns(sizeCategory) {
					if (this.printDesignTypeAhead.trim().length >= 3) {
						fetch(`/print/ordersearch?q=${this.printDesignTypeAhead.trim()}&sizes=${sizeCategory}`)
							.then(response => {
								if (response.ok)
									return response.json()
								else
									throw new Error(response.statusText)
							})
							.then(json => {
								this.printDesignItems = json
							})
							.catch(error => window.alert(`We encountered an error: ${error}`))
					}
				},
				getEmbroideryDesigns(sizeCategory) {
					if (this.embroideryDesignTypeAhead.trim().length >= 3) {
						fetch(`/embroidery/ordersearch?q=${this.embroideryDesignTypeAhead.trim()}&sizes=${sizeCategory}`)
							.then(response => {
								if (response.ok)
									return response.json()
								else
									throw new Error(response.statusText)
						})
						.then(json => {
							this.embroideryDesignItems = json
						})
						.catch(error => window.alert(`We encountered an error: ${error}`))
					}
				},
				getTransferDesigns(sizeCategory) {
					if (this.transferDesignTypeAhead.trim().length >= 3) {
						try {
						fetch(`/transfer/design/ordersearch?q=${this.transferDesignTypeAhead.trim()}&sizes=${sizeCategory}`)
							.then(response => {
								if (response.ok)
									return response.json()
								else
									throw new Error (response.statusText)
							})
							.then(json => {
								this.transferDesignItems = json
							})
							.catch(error => window.alert(`We encountered an error: ${error}`))
						}
						catch(ex) {
							window.alert(`We encountered an error: ${ex.message}`)
						}
					}
				},
				selectPrintDesign(event, garment) {
					// add to garment
					garment.selectedPrintDesign = {
						Code: event.currentTarget.children[0].textContent,
						Notes: event.currentTarget.children[1].textContent,
						Comments: event.currentTarget.children[2].textContent,
						PrintDesignId: event.currentTarget.dataset.id
					}
					// reset ui
					event.currentTarget.closest("details").removeAttribute("open")
					this.printDesignItems = []
					this.printDesignTypeAhead = ""

					// populate screen and location
					garment.printLocations = {} // locations will be for our checkboxes

					const locationNames = <%- JSON.stringify(locations) %>;
					garment.checkedScreens = {}
					locationNames.forEach(name => garment.checkedScreens[name] = [])

					fetch(`/screen/ordersearch?printdesignid=${garment.selectedPrintDesign.PrintDesignId}&sizes=${garment.SizeCategory}`).
						then(response => {
							if (response.ok)
								return response.json()
							else
								throw new Error(response.statusText)
							})
						.then(json => {
							json.forEach(j => {
								locationNames.forEach(name => {
									if (j[name] == 1)
										garment.printLocations[name] ? garment.printLocations[name].push(j) : garment.printLocations[name] = [j]
								})
							})
						})
						.catch(error => window.alert(`We encountered an error: ${error}`))
				},
				selectEmbroideryDesign(event, garment) {
					// add to garment
					garment.selectedEmbroideryDesign = {
						Code: event.currentTarget.children[0].textContent,
						Notes: event.currentTarget.children[1].textContent,
						Comments: event.currentTarget.children[2].textContent,
						EmbroideryDesignId: event.currentTarget.dataset.id
					}
					// reset ui
					event.currentTarget.closest("details").removeAttribute("open")
					this.embroideryDesignItems = []
					this.embroideryDesignTypeAhead = ""

					// populate usb and location
					garment.embroideryLocations = {} // locations will be for our checkboxes

					const locationNames = <%- JSON.stringify(locations) %>;
					garment.checkedUsbs = {}
					locationNames.forEach(name => garment.checkedUsbs[name] = [])

					fetch(`/embroidery/usb/ordersearch?embroiderydesignid=${garment.selectedEmbroideryDesign.EmbroideryDesignId}&sizes=${garment.SizeCategory}`)
					.then(response => {
							if (response.ok)
								return response.json()
							else {
								console.log("error", response)
								throw new Error(response.statusText)
							}
							})
					.then(json => {
						json.forEach(j => {
							locationNames.forEach(name => {
								if (j[name] == 1)
									garment.embroideryLocations[name]
										? garment.embroideryLocations[name].push(j)
										: garment.embroideryLocations[name] = [j]
							})
						})
					})
					.catch(error => window.alert(`We encountered an error: ${error}`))
				},
				selectTransferDesign(event, garment) {
					// add to garment
					garment.selectedTransferDesign = {
						Code: event.currentTarget.children[0].textContent,
						Notes: event.currentTarget.children[1].textContent,
						TransferDesignId: event.currentTarget.dataset.id
					}
					// reset ui
					event.currentTarget.closest("details").removeAttribute("open")
					this.TransferDesignItems = []
					this.TransferDesignTypeAhead = ""

					// populate transfer name and location
					garment.transferLocations = {} // locations will be for our checkboxes

					const locationNames = <%- JSON.stringify(locations) %>;
					garment.checkedTransferNames = {}
					locationNames.forEach(name => garment.checkedTransferNames[name] = [])

					try {
						fetch(`/transfer/name/ordersearch?transferdesignid=${garment.selectedTransferDesign.TransferDesignId}&sizes=${garment.SizeCategory}`).
							then(response => {
								if (response.ok)
									return response.json()
								else
									throw new Error(response.statusText)
							})
							.then(json => {
								console.log("transfer names", json)
								json.forEach(j => {
									locationNames.forEach(name => {
										if (j[name] == 1)
											garment.transferLocations[name]
												? garment.transferLocations[name].push(j)
												: garment.transferLocations[name] = [j]
									})
								})
							})
							.catch(error => window.alert(`We encountered an error: ${error}`))
					}
					catch(ex) {
						window.alert(`We encountered an error: ${ex.message}`)
					}
				},
				screenChange(garment, key) {
					if (garment.checkedScreens[key].length > 2)
						garment.checkedScreens[key].shift()
				},
				usbChange(garment, key) {
					if (garment.checkedUsbs[key].length > 2)
						garment.checkedUsbs[key].shift()
				},
				transferNameChange(garment, key) {
					if (garment.checkedTransferNames[key].length > 2)
						garment.checkedTransferNames[key].shift()
				},
				getGarmentQuantity(garment) {
					let quantity = 0
					for (var q in garment.Quantities.Adults) {
						quantity += garment.Quantities.Adults[q]
					}
					for (var q in garment.Quantities.Womens) {
						quantity += garment.Quantities.Womens[q]
					}
					for (var q in garment.Quantities.Kids) {
						quantity += garment.Quantities.Kids[q]
					}
					return quantity

				},
				getTotalPrice(garment) {
					if (Number(garment.Price)) {
						return Number(garment.Price) * this.getGarmentQuantity(garment)
					}
					else
						return 0
				},
				getAllGarmentsValue() {
					let val = 0
					this.garments.forEach(g => val += this.getTotalPrice(g))
					return val?.toFixed(2) ?? ""
				},
				saveGarment(garment) {
						console.log(`saving garment id !${JSON.stringify(garment)}!`)
						const requestBody = {
							OrderGarmentId: garment.OrderGarmentId,
							OrderId: document.getElementById("orderId").value,
							GarmentId: garment.GarmentId,
							Price: garment.Price,
							quantities: {},
							sizeCategory: garment.SizeCategory,
							printDesignId: garment.selectedPrintDesign?.PrintDesignId || null,
							embroideryDesignId: garment.selectedEmbroideryDesign?.EmbroideryDesignId || null,
							transferDesignId: garment.selectedTransferDesign?.TransferDesignId || null,
							checkedScreens: garment.checkedScreens || null,
							checkedUsbs: garment.checkedUsbs || null,
							checkedTransferNames: garment.checkedTransferNames || null
						}
						let count = 0
						for (size in garment.Quantities[garment.SizeCategory]) {
							requestBody.quantities[size] = garment.Quantities[garment.SizeCategory][size]
							count += requestBody.quantities[size]
						}
						if (count == 0) {
							this.errorMessage = "❌ We require some garment sizes"
							return
						}

						console.log(requestBody)
						fetch(`/order/${document.getElementById("orderId").value}/garment`, {
							method: "POST",
							headers: new Headers({ "Content-Type": "application/json" }),
							body: JSON.stringify(requestBody)
						})
						.then(response => {
							if (response.ok)
								return response.json()
							else
								throw new Error(response.statusText)
						})
						.then(json => {
							if (garment.OrderGarmentId == 0)
								garment.OrderGarmentId = json.OrderGarmentId
							const successDialog = document.getElementById("success")
							successDialog.querySelector("p").textContent = "We have saved the garment to this order"
							successDialog.showModal()
							garment.stockWarning = json.warnings ? json.warnings : ""
							

						})
						.catch(error => window.alert(`We encountered an error: ${error}`))

				},
				deleteGarment(garment, event) {
					event.preventDefault()
					console.log(`deleting garment id !${JSON.stringify(garment)}!`)
					const vue = this
					if (garment.OrderGarmentId == 0) {
						// this isn't perfect, if there are two garments the same not yet saved, it might not remove the right one
						this.garments.splice( this.garments.findIndex(g => g.OrderGarmentId == 0 && g.GarmentId == garment.GarmentId)  , 1)
						return
					}
					fetch(`/order/garment/${garment.OrderGarmentId}`, { method: "DELETE" })
						.then(response => {
							if (response.ok)
								return response.text()
							else
								throw new Error(response.statusText)
						})
						.then(text => {
							vue.garments.splice( vue.garments.findIndex(g => g.GarmentId == garment.GarmentId)  , 1)
						})
						.catch(error => window.alert(`We encountered an error: ${error}`))
				},
				setBuyIn(val) {
					this.buyin = val
				}
			}

		})
			.mount("#garmentApp")


		function printJobSheet(event) {
			window.open(`/order/jobsheet/${document.getElementById("orderId").value}`)
		}


		function shipOrder() {
			console.log("ship")
			fetch(`/order/ship/${document.getElementById("orderId").value}`, { method: "PUT" })
			.then(response => {
				if (response.ok) {
					return response.text()
				}
				else {
					throw new Error(response.statusText)
				}
			})
			.then(text => {
				const successDialog = document.getElementById("success")
				successDialog.querySelector("p").textContent = "✅ We have shipped the order"
				successDialog.addEventListener("close", function() {
					window.location.href=`/order`
				})
				successDialog.showModal()
			})
			.catch(error => window.alert(`We encountered an error: ${error}`)) 


		}

		function toggleGarments(button, event) {
			event.preventDefault()
			if (button.value.startsWith("Hide")) {
				document.getElementById("garmentTable_wrapper").style.display = "none"
				button.value = "Show Garment List"
			}
			else {
				document.getElementById("garmentTable_wrapper").style.display = "block"
				button.value = "Hide Garment List"
			}
		}

	}
	</script>





	<%- include("partials/foot.ejs") %>