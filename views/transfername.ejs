<%- include("partials/head.ejs") %>

<style>
	table.designTable {
		max-width: 500px !important;
		border-left: 1px black solid;
	}
	table.designTable th:nth-child(2), table.designTable th:nth-child(3), table.designTable th:nth-child(4), table.designTable th:nth-child(5), table.designTable th:nth-child(6) {
		width: 3em;
	}
	table.designTable td:nth-child(3), table.designTable td:nth-child(4), table.designTable td:nth-child(5), table.designTable td:nth-child(6) {
		text-align: center;
	}
</style>

<p>
	<a href="/transfer/name/deleted">View (and restore)</a> deleted transfer names
</p>

<input type=button onclick="createNew()" value="Create New" style="margin-bottom:2em" />

<dialog id="newDialog">
	<form method="dialog">
		<h3>Create new Name</h3>
		<p>
			<label for="nameInput">Name</label><input id="nameInput" />
		</p>
		<button value="default" onclick="saveNewName()" id="saveButton">Save</button>&emsp;
		<input type=reset value="Cancel" onclick="this.closest('dialog').close()" />
	</form>

</dialog>

<table id="datatable" class="display compact">
	<thead>
		<tr>
			<th></th>
			<th>Actions</th>
			<th>Name</th>
		</tr>
	</thead>
</table>


<script>
window.datatable = new DataTable("#datatable", {
	processing: true,
	serverSide: true,
	ajax: "/transfer/name/dt",
	error(xhr, error, thrown) {
		console.log(xhr, error, thrown)
		alert('we encountered an error' + Json.stringify(error));
	},
	order: [[0, 'desc']],
	columns: [
		{
			class: "dt-control",
			orderable: false,
			data: null,
			defaultContent: "",
			width: "2em"
		},
		{
			orderable: false,
			sortable: false,
			data: "TransferNameId",
			render(data) {
				return `<a href=# class=editLink onclick="editName(${data}, this, event)" title=Edit><span class="fa fa-lg fa-edit"</span></a> <a href=# class=deleteLink onclick="deleteName(${data}, event)" title=Delete><span class="fa fa-lg fa-trash"></span></a>`
			},
			width: "150px"
		},
		{ data: "Name", width: "250px" },
		]
})


function format(d) {
return fetch(`/transfer/designs/${d.TransferNameId}`)
	.then(response => response.json())
	.then(json => {
		if (json.length == 0)
			return "not used"
		else {
			let ret = "<table class=designTable><tr><th>Transfer Design<th>Size<th>Front<th>Back<th>Pocket<th>Sleeve"
			json.forEach(x => {
				ret += `<tr><td>${x.Code} ${x.Notes}<td>${x.SizeCategory}<td>${x.Front ? "✅" : ""}<td>${x.Back ? "✅" : ""}<td>${x.Pocket ? "✅" : ""}<td>${x.Sleeve ? "✅" : ""}`
			})
			return ret 
		}
	})
}

var detailRows = [];
$("#datatable tbody").on("click", "tr td.dt-control", function () {
var tr = this.closest("tr")
var row = window.datatable.row(tr)
var idx = detailRows.indexOf(tr.getAttribute("id"))
if (row.child.isShown()) {
		tr.classList.remove("details")
		row.child.hide()
		// Remove from the 'open' array
		detailRows.splice(idx, 1)
} else {
		tr.classList.add("details");
		format(row.data()).then(d => row.child(d).show())
		// // Add to the 'open' array
		if (idx === -1) {
			detailRows.push(tr.getAttribute("id"))
		}
}
})
// On each draw, loop over the `detailRows` array and show any child rows
window.datatable.on("draw", function () {
	detailRows.forEach(function(id, i) {
			$(`#${id} td.dt-control`).trigger("click")
	})
})


function deleteName(id, event) {
	event.preventDefault()
	fetch(`/transfer/transfername/${id}`, {
		method: "DELETE"
	}).then(response => {
		if (response.ok)
			return response.text()
		else {
			console.log("error", response)
			throw new Error(response.statusText)
		}
	})
	.then(text => {
		window.datatable.ajax.reload(null, false)
	})
	.catch(error => {
		window.alert(`We encountered an error: ${error}`)
	})
}

function editName(id, a, event) {
	event.preventDefault()
	const tr = a.closest("tr")
	const td = tr.lastElementChild
	const name = td.textContent
	td.innerHTML = `<input type=text value="${name}" /><button onclick="saveEdit(${id}, this, event)">Save</button>&emsp;<input type=reset onclick=cancelEdit(this) value=Cancel />`

}

function cancelEdit(button) {
	const td = button.closest("td")
	const name = td.querySelector("input").value
	td.innerHTML = name

}

function saveEdit(id, button, event) {
	event.preventDefault()
	const td = button.closest("td")
	const newName = td.querySelector("input").value
	const oldName = window.datatable.row(td.parentElement).data().Name
	if (newName == oldName)
		return
	fetch(`/transfer/name/${id}`, {
		method: "PUT",
		headers: new Headers({
			"Content-Type": "application/json"
		}),
		body: JSON.stringify({oldName, newName})
	})
	.then(response => {
		if (response.ok)
			return response.text()
		else {
			console.log("error", response)
			throw new Error(response.statusText)
		}
	})
	.then(text => {
		window.datatable.ajax.reload(null, false)
	})
	.catch(error => window.alert(`We encountered an error: ${error}`))
}

function createNew() {
	document.getElementById("nameInput").value = ""
	document.getElementById("newDialog").showModal()
}

function saveNewName() {
	const name = document.getElementById("nameInput").value
	fetch(`/transfer/name`, {
		method: "POST",
		headers: new Headers({
			"Content-Type": "application/json"
		}),
		body: JSON.stringify({name})
	})
	.then(response => {
		if (response.ok)
			return response.json()
		else
			throw new Error(response.statusText)
	})
	.then(json => {
		window.datatable.ajax.reload(null, true)
	})
	.catch(error => window.alert(`We encountered an error: ${error}`))

}



</script>









<%- include("partials/foot.ejs") %>