<%- include("partials/head.ejs") %>

<button id="topClearButton" onclick="clearSearchFields()" style="margin-left:3em;">Clear Search</button>

<section>
	<div>
	<h3>Terms</h3>
		<details open>
			<summary>Customer</summary>
			<p>
				<label for=customerName>Name</label>
				<input id=customerName type=search list=customerData autocomplete=off placeholder="type name or code" name=Company />
				<datalist id=customerData data-fetchurl="/sales/customernames"></datalist>
			</p>
		</details>
		<details>
			<summary>Order</summary>
			<p>
				<label for=orderNumber>Number</label>
				<input type=text id=orderNumber name="OrderNumber" placeholder="type order number and press enter" />
			</p>
		</details>
		<details>
			<summary>Print</summary>
			<p>
				<label for=print>Design</label>
				<input id=print type=search list=printData autocomplete=off placeholder="type print design" name=Print />
				<datalist id=printData data-fetchurl="/sales/prints"></datalist>
			</p>
			<p>
				<label for=screen>Screen</label>
				<input id=screen type=search list=screenData autocomplete=off placeholder="type screen" name=Screen />
				<datalist id=screenData data-fetchurl="/sales/screens"></datalist>
			</p>
		</details>
		<details>
			<summary>Embroidery</summary>
			<p>
				<label for=embroidery>Design</label>
				<input id=embroidery type=search list=embroideryData autocomplete=off placeholder="type embroidery design" name=Embroidery />
				<datalist id=embroideryData data-fetchurl="/sales/embroideries"></datalist>
			</p>
			<p>
				<label for="usb">USB</label>
				<input id=usb type=search list=usbData autocomplete=off placeholder="type usb" name=Usb />
				<datalist id=usbData data-fetchurl="/sales/usbs"></datalist>
			</p>
		</details>
		<details>
			<summary>Transfer</summary>
			<p>
				<label for="transfer">Design</label>
				<input id=transfer type=search list=transferData autocomplete=off placeholder="type transfer design" name=Transfer />
				<datalist id=transferData data-fetchurl="/sales/transfers"></datalist>
			</p>
			<p>
				<label for="transferName">Name</label>
				<input id=transferName type=search list=transferNameData autocomplete=off placeholder="type transfer name" name=TransferName />
				<datalist id=transferNameData data-fetchurl="/sales/transfernames"></datalist>
			</p>
		</details>

	</div>
	<div>
		<h3>Filters</h3>
		<details>
			<summary>Region / Sales Rep</summary>
			<p>
				<label for=region>Region</label>
				<select id=region name=Region>
					<option value=>-- select --</option>
					<% regions.forEach(r => { %>
						<option value="<%= r.id %>"><%= r.name %></option>
					 <% }) %>
				 </select>
			</p>
			<p>
				<label for=salesRep>Sales Rep.</label>
				<select id=salesRep name=SalesRep>
					<option value=>-- select --</option>
					<% salesreps.filter(sr => !sr.Deleted).forEach(s => { %>
						<option value="<%= s.Name %>"><%= s.Name %></option>
					<% }) %>	
					<% const deleted = salesreps.filter(sr => sr.Deleted);
					if (deleted.length > 0) { %>
					 <optgroup label="Deleted">
						<% deleted.forEach(s => { %>
							<option value="<%= s.Name %>"><%= s.Name %></option>
						<% }) %>
						</optgroup>
					<% } %>

				</select>
			</p>
		</details>

		<details>
			<summary>Date range</summary>
			<p>
				<label for=dateFrom>Date From</label>
				<input type=date id="dateFrom" name="DateFrom" />
			</p>
			<p>
				<label for=dateTo>Date To</label>
				<input type=date id="dateTo" name="DateTo" />
			</p>
		</details>
	<div style="margin-top: var(--unit-3)">
		<button onclick="clearSearchFields()">Clear Search</button>
	</div>
	</div>
</section>



</main>

<main class="wider">

	<table id="dt" class="display compact">
		<thead>
			<tr>
				<% columnNames.forEach(col => { %>
				 <th><%= col %></th>
				<% }) %>
			</tr>
		</thead>
	</table>

	<h5 id="customerSalesTotalLabel">Customer Sales Total</h5>

	<button 
		style="margin-left:2em" 
		onclick="downloadCsv()">
		<span class="fa fa-download"></span> Download Excel <span class="fa fa-file-excel"></span></button>

	
<script>

// these are for the sub-item display in the grid
const sizes = <%- JSON.stringify(sizes) %>;
const locations = <%- JSON.stringify(locations) %>;
const art = <%- JSON.stringify(art) %>;


const dataSearchObject = {
	Company: null,
	Print: null,
	Screen: null,
	Embroidery: null,
	Usb: null,
	Transfer: null,
	TransferName: null,
	SalesRep: null,
	Region: null,
	OrderNumber: null,
	DateFrom: null,
	DateTo: null,
};


function downloadCsv() {
	console.log("downloading…")
	// send a get request
	fetch("/sales/csv", {
		method: "POST",
		headers: new Headers({
			"Content-Type": "application/json"
		}),
		body: JSON.stringify(dataSearchObject)
	})
	.then(response => {
		if (response.ok) 
			return response.text()
		else
			throw new Error(response.statusText)
		}
	)
	.then(text => {
		if (!text)
			return;

		// create a blob
		const blob = new Blob([text], {type: "text/csv"})
		// create a url from blob
		const url = window.URL.createObjectURL(blob)
		// create a link
		const a = document.createElement("a")
		a.href = url
		a.download = "sales.csv"
		// click the link
		a.click()
	})
	.catch(err => {
		console.error(err)
	})
}

function cloneOrder(a, event) {
	event.preventDefault()
	const tr = a.closest("tr")
	const api = $("table#dt").dataTable().api()
	const row = api.row(tr)
	const data = row.data()
	const orderid = data.OrderId
	window.location.href = `/order/new?clone=${orderid}`
	console.log(orderid)
}


window.datatable = new DataTable("table#dt", {
	fixedHeader: true,
	processing: true,
	serverSide: true,
	dom: "l<'buttondiv'B>rtip", 
	tabIndex: 1,
	pageLength: 50,
	createdRow: (row, data, dataIndex) => row.setAttribute("tabIndex", 0),
	ajax: { 
		url: "/sales/dt",
		data: function(d) {
			d.customSearch = dataSearchObject
		}
	},
	order: [[3, "desc"]],
	columns: [
		{
			className: 'dt-control',
			orderable: false,
			data: null,
			title: "Actions",
			width: "4em",
			render(data) {
<% if (!poweruser) { %>
					return ""
<% } %>
				if (data.DateProcessed)
					var orderUrl = `sales/edit/${data.OrderId}`;
				else
					var orderUrl = `order/edit?id=${data.OrderId}`;
				let result = `&ensp;
				<a href="/${orderUrl}" title="Edit this order">
					<span class="fa fa-edit fa-lg" style="margin-top:.5em"></span>
				</a>&ensp;
				<a href=/${data.DateProcessed ? 'sales' : 'order'}/jobsheet/${data.OrderId} title="Print this order" target=_blank>
					<span class="fa fa-print fa-lg" style=margin-top:.5em></span>
				</a>`

				return result
			}			
		},
		{ data: "OrderId",
			visible: false
		},
		{ data: "OrderNumber", width: "3em" }, 
		{ data: "OrderDate", 
			width: "3em",
			render: function(data) {
				const num = Date.parse(data)
				if (isNaN(num))
					return data
				else
					return new Date(num).toLocaleDateString("en-AU").split("/").map(d => d.replace(/^0/, "")).join("/")
			}
		},
		{ data: "Owner", 
			width: "3em", 
			render: function(data) {
				if (data === null || data.length === 0) {
					return "";
				}
				else if (data[0] === ":")
					return data.substring(1);
				else
					return data.replace(":", "<br>")
			}
		},
		{ data: "DateProcessed", 
			width: "4em",
			render: function(data) {
				const ts = Date.parse(data)
				if (isNaN(ts))
					return data
				else
					return /*html*/`<strong>${new Date(ts).toLocaleDateString("en-AU").split("/").map(d => d.replace(/^0/, "")).join("/")}</strong>`
				}
		}, 
		{ data: "Delivery",
			width: "4em"
		},
		{
			data: "designItems",
			render(data) { 
				if (data.length === 2 && data[0] === data[1]) {
					return data[0];
				}
				else {
					return data.join("<br>");
				}
			},
			orderable: false
		}, 
		{ data: "Company",
			render: function(data, word, row) {
				return `${data} <a href=/customer/edit?id=${row.CustomerId}><span class="fa fa-edit fa-lg" style="margin-top:.5em"></span></a>`
			}	
	}, 
		{ data: "Terms", width: "2em" }, 
		{ data: "BuyIn",
			width: "1em",
			render: function(data, word, row) {
				if (row.StockOrderId == null || row.StockOrderId=="0")
					return ""
				else
					return `<a href="/purchasing?stockorderid=${row.StockOrderId}">${row.StockOrderId}</a>`
			}
		}, 
		{ data: "Notes" }, 
		{ data: "Done",
			width: "1em",
			render: function(data) {
				return data ? "✔️" : ""
			}
		}
	],
	buttons: [
		{
			text: "Expand all",
			action: (e, dt, node, config) => {
				if (dt.buttons().text()[0] == "Expand all") {
					Array.from(document.querySelectorAll("td.dt-control")).forEach(function(td) {
						if (!td.classList.contains("shown"))
							$(td).trigger("click")
					})
					dt.buttons(0).text("Collapse all")
				} 
				else if (dt.buttons().text()[0] == "Collapse all") {
					Array.from(document.querySelectorAll("td.dt-control")).forEach(function(td) {
						if (td.classList.contains("shown"))
							$(td).trigger("click")
					})
					dt.buttons(0).text("Expand all")
				}
			}
		},
	]
})

window.datatable.on("draw", async function() {
	window.datatable.buttons(0).text("Expand all");

	// if it's a customer and a date range, display a sum of their orders

	if (dataSearchObject.Embroidery != null || dataSearchObject.OrderNumber !== null || dataSearchObject.Print !== null
			|| dataSearchObject.Screen !== null || dataSearchObject.Transfer !== null || dataSearchObject.TransferName !== null
			|| dataSearchObject.Usb !== null) {
				// if one of these are set, we don't do a sum
		document.getElementById("customerSalesTotalLabel").textContent = ""
		return;
	}

	if (dataSearchObject.DateFrom === null && dataSearchObject.DateTo === null) {
		// don't do a sum if there is no date range
		document.getElementById("customerSalesTotalLabel").textContent = ""
		return;
	}


	const url = `/sales/filtertotal?customerid=${dataSearchObject.Company || ""}&fromdate=${dataSearchObject.DateFrom || ""}&todate=${dataSearchObject.DateTo || ""}&regionid=${dataSearchObject.Region || ""}&salesrep=${dataSearchObject.SalesRep || ""}`;
	const response = await fetch(url);
	const text = await response.text();

	const who = [];
	if (dataSearchObject.Company !== null)
		who.push("Customer")
	if (dataSearchObject.Region !== null)
		who.push("Region")
	if (dataSearchObject.SalesRep !== null)
		who.push("Rep")
	document.getElementById("customerSalesTotalLabel").textContent = `Total sales ${who.length > 0 ? "for" : ""} ${who.join("/")} in date range (excl. freight): ${text}`

});



// navigate with up/down keys
$("tbody").on("keydown", "tr", function (event) {

		const row = window.datatable.row(this)
		console.log(event)
		let td = null

		switch (event.originalEvent.key) {

			case "ArrowDown": 
				let next = this.nextElementSibling
				if (next != null) {
					if (this.classList.contains("dt-hasChild"))
						next = next.nextElementSibling			
					next.focus()
					//next.classList.add("selected")
					//this.classList.remove("selected")
				}
				break;
			
			case "ArrowUp":
				let previous = this.previousElementSibling
				if (previous != null) {
					if (previous.getAttribute("tabindex") == null)
						previous = previous.previousElementSibling			
					previous.focus()
					//previous.classList.add("selected")
					//this.classList.remove("selected")
				}
				break;

			case "ArrowLeft":
				if (row.child.isShown())
					onOpenRowButtonClick(event)
				break;

			case "ArrowRight":
				if (! row.child.isShown()) {
					onOpenRowButtonClick(event)
				}
				break

			case "Enter":
				window.location.href = `/order/edit?id=${$(this).data("id")}`

		}
})


function format(data) {
		if (!data) return // happens when you click the clone button

//		const retVal = 
//			return retVal

	}

async function onOpenRowButtonClick(evt) {
		const row = window.datatable.row(evt.target)
		const data = row.data()

		if (row.child.isShown()) {
				// This row is already open - close it
				row.child.hide();
				evt.target.classList.remove('shown');
		} else {
				// Open this row
				var response = await fetch(`/sales/${data.OrderId}/history`)
				if (response.ok) {
					var json = await response.json()
					if (json.length == 0) {
						return "<span class=nousbs>no sales items<span>"
					}

					let tableHtml = /*html*/`<table class=sub-table><thead><tr><th>Design<th>Product<th>Sizes<th class=sub-num>Quantity<th class=sub-num>Price<th class=sub-num>Value<tbody>`;
					let quantity = 0;
					var value = 0;
					for (var item of json) {
						tableHtml += "<tr>";
						// designs
						tableHtml += "<td>";
						let designMarkup = [];
						// designs
						locations.forEach(location => {
							art.forEach(a => {
								// e.g. FrontPrintDesign
								if (item[`${location}${a.decoration}Design`] !== null && item[`${location}${a.decoration}Design`] !== "") {
									designMarkup.push(`<span class=nowrap><span class=subtable-head>${location} ${a.decoration} Design</span>: ` + item[`${location}${a.decoration}Design`] + "</span>");
								}
								// e.g. FrontScreen
								if (item[`${location}${a.medium}`] !== null && item[`${location}${a.medium}`] !== "") {
									designMarkup.push(`<span class=nowrap><span class=subtable-head>${location} ${a.medium}</span>: ` + item[`${location}${a.medium}`] + "</span>");
								}
								// e.g. FrontScreen2
								if (item[`${location}${a.medium}2`] !== null && item[`${location}${a.medium}2`] !== "") {
									designMarkup.push(`<span class=nowrap><span class=subtable-head>${location} ${a.medium} 2</span>: ` + item[`${location}${a.medium}2`] + "</span><br>");
								}
							});
						});
						tableHtml += designMarkup.join("<br>");
						// products
						tableHtml += `<td>${item.Product}<br>${item.Product2}`;
						// sizes, first get the ones that are not zero, and show them
						var mySizes = sizes.filter(s => item[s] !== 0);
						tableHtml += "<td>" + mySizes.map(s => `<span class=subtable-head>${s == "ASm" ? "AS" : s}</span>:${item[s]}`).join(", ");
						var numberOfProducts = mySizes.reduce( (acc, curr) => acc + item[curr], 0);
						quantity += numberOfProducts;
						tableHtml += `<td class=sub-num>${numberOfProducts}`;
						tableHtml += `<td class=sub-num>${item.Price.toLocaleString("en-AU", {style: "currency", currency: "AUD"})}`;
						var itemValue = item.Price * numberOfProducts;
						tableHtml += `<td class=sub-num>${itemValue.toLocaleString("en-AU", {style: "currency", currency: "AUD"})}`;
						value += itemValue;
						tableHtml += "</tr>";
					}
					tableHtml += `<tfoot><tr><td colspan=3><td class=sub-num>${quantity}<td><td class=sub-num>${value.toLocaleString("en-AU", {style: "currency", currency: "AUD"})}`;

					tableHtml += "</table>";

					const totalValue = json.reduce((acc, curr) => {
						return acc + parseFloat(curr.Value.replace("$", ""));
					}, 0);
					const totalQuantity = json.reduce((acc, curr) => {
						return acc + curr.Total;
					}, 0);

					row.child(tableHtml).show();
					evt.target.classList.add("shown");

				}
				else {
					throw new Error(response.statusText);
				}
		}
	}


// Add event listener for opening and closing details
document.querySelector("table#dt tbody").addEventListener("click", onOpenRowButtonClick)


// load up our datalist elements first time the input control is focussed
Array.from(document.querySelectorAll("input[type=search]")).forEach(function(input) {
	input.addEventListener("focus", async function() {
		const datalist = document.getElementById(input.getAttribute("list"));
		if (datalist.options.length === 0) {
			// not loaded before, so load it up
			const response = await fetch(datalist.dataset.fetchurl);
			const json = await response.json();
			for (item of json) {
				datalist.insertAdjacentHTML("beforeend", `<option data-value="${item.value}" value="${item.name}">`);
			}
		}
	})
});


// handle data list selection
Array.from(document.querySelectorAll("input[type=search]")).forEach(function(input) {
	input.addEventListener("input", function(event) {
		//console.log(event.inputType);
		if (event instanceof InputEvent && this.value === "") {
			// user has set the input to empty
			dataSearchObject[input.name] = null;
			input.value = "";
			window.datatable.ajax.reload()
			return;
		} 

		if (!(event instanceof InputEvent) || event.inputType === "insertReplacementText") {
			const inputValue = input.value

			if (inputValue === "") {
				// user has clicked the cross that resets the search input
				dataSearchObject[input.name] = null;
				window.datatable.ajax.reload();
				return;
			}

			// user has chosen a value from the list
			const datalist = document.getElementById(input.getAttribute("list"));
			const options = Array.from(datalist.querySelectorAll("option"));
			var chosenOption = options.find(option => option.value === inputValue);
			console.log("chosenOption", chosenOption);
			dataSearchObject[input.name] = chosenOption.dataset.value;

			// null all other search boxes
			Array.from(document.querySelectorAll("input[type=search], input[type=text]")).forEach(function(otherInput) {
				if (otherInput !== input) {
					dataSearchObject[otherInput.name] = null;
					otherInput.value = "";
				}
			});

			window.datatable.ajax.reload();
		}
	});
});

// handle select box change, which is owner and sales rep
Array.from(document.querySelectorAll("details select")).forEach(function(select) {
	select.addEventListener("change", function(event) {
		dataSearchObject[select.name] = select.value;
		window.datatable.ajax.reload();
	});
});

Array.from(document.querySelectorAll("input[type=date]")).forEach(function(input) {
	input.addEventListener("change", function(event) {
		dataSearchObject[input.name] = input.value;
		window.datatable.ajax.reload();
	});
});

const orderNumberInput = document.getElementById("orderNumber");
function onOrderNumberInputChange() {
	dataSearchObject[orderNumberInput.name] = orderNumberInput.value;
	window.datatable.ajax.reload();

	//reset input[type=search]
	Array.from(document.querySelectorAll("input[type=search]")).forEach(function(input) {
		input.value = "";
		dataSearchObject[input.name] = "";
	});
}
orderNumberInput.addEventListener("blur", onOrderNumberInputChange);
orderNumberInput.addEventListener("keyup", function(event) {
	if (event.key == "Enter") {
		onOrderNumberInputChange();
	}
});


// minimum to date is the from date
document.getElementById("dateFrom").addEventListener("input", function() {
	document.getElementById("dateTo").setAttribute("min", this.value)
});

// maximum from date is the to date
document.getElementById("dateTo").addEventListener("input", function() {
	document.getElementById("dateFrom").setAttribute("max", this.value)
})


function clearSearchFields() {
	Array.from(document.querySelectorAll("input[type=date]")).forEach(i => i.value = "");

	Array.from(document.querySelectorAll("details select")).forEach(s => s.value = "");

	Array.from(document.querySelector("input[type=search]")).forEach(s => s.value = "");

	for(key in dataSearchObject) {
		dataSearchObject[key] = null;
	}

	datatable.ajax.reload()
}

var button = document.getElementById("topClearButton")
document.querySelector("main>h1").appendChild(button)

</script>



<%- include("partials/foot.ejs") %>