<%- include("partials/head.ejs") %>

<style>
	span.fa-trash, span.fa-download {
		margin-top: .5em;
	}

</style>

	<h3>Raise or View Purchase Orders</h3>


	<div id=vueApp>
<% if (poweruser) { %> 
		<p>
			<input type=button @click="reset()" value="Create new purchase order"  />
		</p>
<% } %>
		<fieldset><legend>{{ stockOrderId == "<%= stockOrderId %>" ? "Create New" : "Edit existing"  }}</legend>
			<p>
				<label for="stockOrderSelect">Select existing to edit</label>
				<select id="stockOrderSelect" v-model="stockOrderId" @change="onSelectOrder">
					<option value="<%= stockOrderId %>">—Create new or select existing from list—</option>
					<option v-for="stockOrder in stockOrders" :value="stockOrder.StockOrderId" :key="stockOrder.StockOrderId">{{ stockOrder.StockOrderId }} {{ new Date(Date.parse(stockOrder.OrderDate)).toLocaleDateString("en-AU") }} {{ stockOrder.Company }}</option>
				</select>
			</p>

			 <p v-show="stockOrderId != ''">
				<label for="stockOrderId">Stock Order Number: {{ stockOrderId }} </label>
			</p>

			<p>
				<label for="orderDate">Order Date</label>
				<input id="orderDate" type="date"d v-model="orderDate" />
			</p>

			<p>
				<label for="supplierSelect">Supplier</label>
				<select id="supplierSelect" v-model="supplierId" required ref="supplierId">
					<option value="">—Choose a supplier—</option>
					<option v-for="supplier in suppliers" :value="supplier.SupplierId">{{ supplier.Company }}</option>
				</select><br>
				<span>{{ suppliers.find(s => s.SupplierId == supplierId)?.Notes ?? "" }}</span>&emsp;<a :href="`/supplier/edit?id=${supplierId}`" target="_blank">View/Edit</a>
			</p>

			<p>
				<label for="notes">Notes</label>
				<textarea id="notes" v-model="notes" @keydown.tab.exact="onNotesKeyDown($event)"></textarea>
			</p>

		</fieldset>

		<h4>Products 
<span v-if="(chosenGarments.Adults.length + chosenGarments.Kids.length + chosenGarments.Womens.length) == 0" style="color:darkred">*</span></h4>
		<table v-for="(arr, sizeCategory) in chosenGarments" :key="sizeCategory" class="chosen-garment">
			<caption>{{ sizeCategory[0].toUpperCase() + sizeCategory.slice(1) }} </caption>
			<thead>
				<tr>
					<th>Code</th><th>Type</th><th>Colour</th><th>Label</th><th v-for="size in sizes[sizeCategory]">{{ size == "ASm" ? "S" : size.slice(1) }}</th>
				</tr>
			</thead>
			<tbody>
				<tr v-if="arr.length==0"><td :colspan="sizes[sizeCategory].length+4">Select products from the list</td></tr>
				<template v-for="(garment, i) in arr" :key="i">
					<tr style="border-bottom:unset">
						<td rowspan=2>{{ garment.Code }} <br>
<% if (poweruser) { %>
							<a href=# @click.prevent="receiveGarment(garment, sizeCategory)" :data-id="garment.GarmentId" 
							title="Receive this garment into stock"><span class="fa fa-download fa-lg"></span></a><br>
							<a href=# @click.prevent="removeGarment(garment.GarmentId, sizeCategory)" :data-id="garment.GarmentId" 
							title="Remove this garment from this order"><span class="fa fa-trash fa-lg"></span></a>
<% } %>
						</td>
						<td rowspan=2>{{ garment.Type }}</td>
						<td rowspan=2>{{ garment.Colour }}</td>
						<td rowspan=2>{{ garment.Label }}</td>
						<td v-for="(size, i) in sizes[sizeCategory]" style="padding-bottom:0"><input type=number min=0 v-model="garment[size]" @change="dirty=true" :ref="size" /></td>
					</tr>
					<tr><td :colspan="sizes[sizeCategory].length" style="text-align:center;padding-top:0">Total: {{getCount(sizeCategory, garment)}}</tr>
				</template>
			</tbody>
		</table>
		<p>Total Products: {{ getTotalProducts() }}</p>
<hr>
<p>
<% if (poweruser) { %>
	<button type="submit" @click.prevent="saveItem" :disabled="isInvalid()">Save purchase order</button>&emsp;
<% } %>	
	<input type="button" @click.prevent="printItem" :disabled="stockOrderId == '' || dirty==true" value="Print Purchase Order" />&emsp;
<% if (poweruser) { %>
	<button v-show="stockOrderId != ''" type="reset" @click="deletePurchaseOrder">Delete purchase order</button>
	<button type="submit" @click.prevent="receiveOrder" :disabled="stockOrderId == '' || dirty==true" id=receiveOrder>Receive order</button>
<% } %>
</p>

<dialog id="successDialog">
  <h4>Success</h4>
	<p>Saved OK</p>
  <form method="dialog">
    <button>OK</button>
  </form>
</dialog>

</div>
<hr>

<% if (poweruser) { %> 
<h4>Add products </h4>
<table id="garmentTable" class="hover">
	<thead>
		<tr>
			<th></th><th>Size Category</th><th>Code</th><th>Type</th><th>Colour</th><th>Label</th><th>Notes</th>
		</tr>
		<tr class="filters">
			<th></th><th>Size Category</th><th>Code</th><th>Type</th><th>Colour</th><th>Label</th><th></th>
		</tr>
	</thead>
	<tbody>
	</tbody>
</table>
<% } %>
<p style="height:2em"></p>

<script>

function addGarment(evt, id) {
	evt.preventDefault()
	const data = window.datatable.row(`#row-${id}`).data()
	window.vueApp.addChosenGarment(data.SizeCategory, {
		Code: data.Code,
		Type: data.Type,
		Colour: data.Colour,
		Label: data.Label,
		GarmentId: data.GarmentId
	})

}

window.datatable = new DataTable("#garmentTable", {
	orderCellsTop: true,
	fixedHeader: true,
	processing: true,
	serverSide: true,
	ajax: "/garment/purchase/dt",
	dom: "lrtip",
	columns: [
	{
			data: "GarmentId",
			render(data, type, row) {
				// return `<input type=button onclick="addGarment(event, ${data})" value=Add class=add-garment-buttonink />`
				return `<a href=# onclick="addGarment(event, ${data})" title="Add garment to purchase order"><span class="fa fa-plus fa-lg"></span></a> `
			},
			width: "50px",
			orderable: false
		},
		{ data: "SizeCategory", width: "80px" },
		{ data: "Code", },
		{ data: "Type" },
		{ data: "Colour" },
		{ data: "Label" },
		{ 
			data: "Notes", 
			orderable: false 
		}
	],
	"order": [[1, "asc"]],
	initComplete() {
		// support for filtering by column
		var api = this.api();
		// For each column
		api.columns()[0].forEach(function (i) {

			const th = Array.from(document.querySelectorAll(".filters th"))[i]
			if (i > 0 && i < 6) {
				if (i == 0) {
					th.innerHTML = "<select><option><option>Adults<option>Womens<option>Kids</select>"
						th.querySelector("select").addEventListener("change", function () {
						api.column(i).search(this.value).draw()
						window.setTimeout(function() {
							this.focus({preventScroll:true})
						}, 20)
					})
				}
				else {
					th.innerHTML = "<input placeholder=search />"
					th.querySelector("input").addEventListener("input", function () {
						api.column(i).search(this.value).draw()
						window.setTimeout(function() {
							this.focus({preventScroll:true})
						}, 20)
					})
				}
			}
			else
				th.innerHTML = ""
		})
	}

})
</script>

<script>
window.garment = <%- garment %>;

window.vueApp = Vue.createApp({
	data() {
		return {
			orderDate: new Date().toISOString().slice(0, 10),
			supplierId: "<%= supplierId %>",
			suppliers: <%- JSON.stringify(suppliers) %>,
			notes: "<%= orderNumber %>",
			stockOrderId: "<%= stockOrderId %>",
			stockOrders: <%- JSON.stringify(stockOrders) %>,
			received: false,
			chosenGarments: {
				Adults: [],
				Womens: [],
				Kids: [],
			},
			sizes: <%- sizes %>,
			dirty: false
		}
	},
	methods: {
		onSelectOrder() {
			if (this.stockOrderId == "") {
				// no stock order id
				this.$refs.supplierId.focus()
				this.notes = ""
				this.supplierId = ""
				this.orderDate = new Date().toISOString().slice(0, 10)
				this.chosenGarments.Adults = []
				this.chosenGarments.Womens = []
				this.chosenGarments.Kids = []
				return
			}				
			const vue = this
			// get details of the stock order, and populate the chosen garments
			fetch(`/stockorder/${this.stockOrderId}`)
			.then(response => {
				if (response.ok)
					return response.json()
				else {
					console.log("error", response)
					throw new Error(response.statusText)
				}
			})
			.then(json => {
					vue.dirty = false
					vue.stockOrderId = json.StockOrderId
					vue.notes = json.Notes
					vue.orderDate = json.OrderDate
					vue.supplierId = json.SupplierId
					vue.chosenGarments.Adults = []
					vue.chosenGarments.Womens = []
					vue.chosenGarments.Kids = []
					json.garments.forEach(g => {
						const garment = {
							Code: g.Code,
							Type: g.Type,
							Colour: g.Colour,
							Label: g.Label,
							GarmentId: g.GarmentId
						}
						vue.sizes.Kids.forEach(k => garment[k] = g[k])
						vue.sizes.Womens.forEach(w => garment[w] = g[w])
						vue.sizes.Adults.forEach(a => garment[a] = g[a])
						vue.chosenGarments[g.SizeCategory].push(garment)
					})
			})
			.catch(error => window.alert(`We encountered an error: ${error}`))

		},
		addChosenGarment(sizeCategory, data) {
			if (!this.chosenGarments[sizeCategory].find(g => g.GarmentId == data.GarmentId )) {
				this.chosenGarments[sizeCategory].push(data)

				const caption = Array.from(document.querySelectorAll("caption")).find(c => c.textContent == sizeCategory)
				const table = caption.closest("table")
				const tr = table.querySelector("tr:last-child")
				tr.scrollIntoView({behavior:"smooth"})

				this.$nextTick(function() {
					// find the input that is the last item for the first size
					this.$refs[this.sizes[sizeCategory][0]][this.$refs[this.sizes[sizeCategory][0]].length-1].focus()
				})
			}

		},
		saveItem(evt) {
			evt.preventDefault()
			let method = "POST" // POST to insert, when no stock order id
			let url = "/stockorder"
			if (this.stockOrderId != "" ) { // PUT to edit
				url += `/${this.stockOrderId}`
				method = "PUT"
			}
			const data = {
				orderDate: this.orderDate,
				supplierId: this.supplierId,
				notes: this.notes,
				chosenGarments: this.chosenGarments
			}
			let vue = this
			fetch(url, {
				method,
				headers: new Headers({
					"Content-Type": "application/json"
				}),
				body: JSON.stringify(data)
			})
			.then(response => {
				if (response.ok)
					return response.text()
				else {
					console.log("error", response)
					throw new Error(response.statusText)
				}
			})
			.then(text => {
				vue.dirty = false
				document.getElementById("successDialog").showModal()

				if (vue.stockOrderId == "") {
					vue.stockOrderId = text // the new stock order id
					vue.stockOrders.push({
						StockOrderId: vue.stockOrderId,
						Company: vue.suppliers.find(s => s.SupplierId == vue.supplierId).Company,
						OrderDate: vue.orderDate,
						Notes: vue.notes
					})
				}
				
			})
			.catch(error => window.alert(`We encountered an error: ${error}`))

		},
		printItem() {
			window.open("/purchasing/purchaseorder/" + this.stockOrderId)
		},
		receiveOrder() {
			if (this.dirty) {
				return
			}
			const vue = this
			fetch(`/stockorder/receiveorder/${this.stockOrderId}`, { 
				method: "PUT",
			})
			.then(response => {
				if (response.ok) {
					// all garments have been received, the database deleted the stock order, so reset our UI
					vue.chosenGarments.Adults = []
					vue.chosenGarments.Womens = []
					vue.chosenGarments.Kids = []
					vue.stockOrders = vue.stockOrders.filter(s => s.StockOrderId != vue.stockOrderId)
					vue.orderDate = new Date().toISOString().slice(0, 10)
					vue.supplierId = ""
					vue.notes = ""
					vue.stockOrderId = ""
				}
				else {
					throw new Error(response.statusText)
				}
			})
			.catch(error => window.alert(`We encountered an error: ${error}`))
		},
		receiveGarment(garment, sizeCategory) {
			if (this.dirty) {
				return
			}

			const vue = this
			fetch(`/stockorder/receivegarment/${this.stockOrderId}`, {
				method: "POST", 
				body: JSON.stringify(garment),
				headers: new Headers({"Content-Type": "application/json"})
			})
			.then(response => {
				if (response.ok) {
					// remove it from the garment list
					vue.chosenGarments[sizeCategory] = vue.chosenGarments[sizeCategory].filter(g => g.GarmentId != garment.GarmentId)
					if ((vue.chosenGarments.Adults.length + vue.chosenGarments.Kids.length + vue.chosenGarments.Womens.length) == 0) {
						// all garments have been received, the database deleted the stock order, so reset our UI
						vue.stockOrders = vue.stockOrders.filter(s => s.StockOrderId != vue.stockOrderId)
						vue.orderDate = new Date().toISOString().slice(0, 10)
						vue.supplierId = ""
						vue.notes = ""
						vue.stockOrderId = ""
					}
				}
				else {
					throw new Error(response.statusText)
				}
			})
			.catch(error => window.alert(`We encountered an error: ${error}`))
		},
		removeGarment(id, sizeCategory) {

			if (this.stockOrderId == "") {
				// the order hasn't been saved yet, so just remove the garment from the UI
				this.chosenGarments[sizeCategory] = this.chosenGarments[sizeCategory].filter(g => g.GarmentId != id)
				return
			}

			const vue = this
			fetch(`/stockorder/removegarment/${this.stockOrderId}/${id}`, {method: "PUT"})
			.then(response => {
				if (response.ok) return response.text()
				else  {
					console.log("error", response)
					throw new Error(response.statusText)
				}
			})
			.then(text => {
				vue.chosenGarments[sizeCategory] = vue.chosenGarments[sizeCategory].filter(g => g.GarmentId != id)
			})
			.catch(error => window.alert(`We encountered an error: ${error}`))

		},
		isInvalid() {
			return this.supplierId == "" || 
				(this.chosenGarments.Adults.length==0 && this.chosenGarments.Womens.length==0 && this.chosenGarments.Kids.length==0)
		},
		getCount(sizeCategory, garment) {
			return this.sizes[sizeCategory].reduce((acc, curr) => {
				return acc += garment[curr] ?? 0
			}, 0)
		},
		getTotalProducts() {
			let total = 0
			for (sizeCategory in this.chosenGarments) {
				for (garment of this.chosenGarments[sizeCategory]) {
					for (size of this.sizes[sizeCategory]) {
						if (garment[size]) {
							total += garment[size]
						}
					}
				}
			}
			return total
		},
		reset() {
			this.stockOrderId=''
			this.onSelectOrder()
		},
		onNotesKeyDown(event) {
			//when finished with notes, jump directly to the products grid
			console.log(event, event.code)
			event.preventDefault()
			document.querySelector("#garmentTable input:first-child").focus()
			document.querySelector("#garmentTable").scrollIntoView({behavior:"smooth"})
		},
		deletePurchaseOrder() {
			if (window.confirm("We will delete this purchase order. Continue?")) {
				const vue = this
				fetch(`/stockorder/${this.stockOrderId}`, { method: "DELETE"} )
				.then(response => {
					if (response.ok) {
						//update ui
						vue.stockOrders = vue.stockOrders.filter(so => so.StockOrderId != vue.stockOrderId)
						this.reset()
					}
					else 
						throw new Error(response.statusText)
				})
				.catch(error => window.alert(`We encountered an error: ${error}`))
			}
		}
	},
	mounted() {
		if (window.garment) {
			this.chosenGarments[garment.SizeCategory].push(garment)
		}

		if (window.location.search) {
			const search = window.location.search.slice(1)
			const searchParts = search.split("&")
			const searchId = searchParts.find(s => s.startsWith("id="))
			if (searchId) {
				const id = searchId.slice(3)
				this.stockOrderId = id
				this.onSelectOrder()
			}
		}
	}
}).mount("#vueApp")


	</script>




	<%- include("partials/foot.ejs") %>