<%- include("partials/head2.ejs") %>


<style>

</style>



<div id="app">

	<fieldset><legend>Order details (Id: {{ order.OrderId }})</legend>

		<!-- customer details -->
		<div style="margin-top:var(--unit-2)" ref="customerInfo">
			<p  v-if="order.CustomerId">
				Customer: <span v-html="formatCustomer">
			</p>
			<details :open="!order.CustomerId" ref="customerDetails" style="margin-top:var(--unit)" @toggle="onCustomerDetailsToggle">
				<summary>{{ this.order.CustomerId ? 'Change' : 'Choose' }} customer</summary>
				<customer-pick @customer-select="onCustomerSelect" ref="customerPick"></customer-pick>
			</details>
		</div>

		<!-- order properties -->
		<section>
			<div>
				<p>
					<label for=orderNumber>Order number</label>
					<input id=orderNumber required placeholder=required v-model="order.OrderNumber" :autofocus="order.orderId != 0" ref="orderNumberInput" />
				</p>
				<p>
					<label for="salesRep">Sales Rep.</label>
					<select id="salesRep" required v-model="order.SalesRep">
						<option value="">—Select—</option>
						<option v-for="rep in salesReps" :value="rep">{{ rep }}</option>
					</select>
				</p>
				<p>
					<label for=terms>Terms</label>
					<select id=terms v-model="order.Terms">
						<option value="">—Select—</option>
						<option value="C.O.D.">C.O.D.</option>
						<option value="Net 7 days">Net 7 days</option>
						<option value="Net 30 days">Net 30 days</option>
					</select>
				</p>
				<p style="margin-top:calc(--unit + --unit-2)">
					<input id=repeat type=checkbox v-model="order.Repeat" /><label for=repeat>Repeat</label>
					<input id=newDesign type=checkbox v-model="order.New" /><label for=newDesign>New</label>
					<input id=buyIn type=checkbox 
							v-model="order.BuyIn" 
							:disabled="(order.OrderId==0 && order.StockOrderId != null) || order.OrderId != 0" />
					<label for=buyIn>Buy In</label>
				</p>
	
				<p v-if="order.OrderId==0 && order.BuyIn">
					<label for="purchaseSelect">Buy In — choose an existing purchase order to set the products</label>
					<select id="purchaseSelect" v-model="order.StockOrderId" @change="onPurchaseOrderSelect">
						<option value="">— Select —</option>
						<option v-for="po in purchaseOrders" :value="po.StockOrderId">{{ po.StockOrderId }} {{ po.OrderDate }} {{ po.Company }}</option>

					</select> <a id="viewSelectedPurchaseOrder" :href="`/purchasing?id=${order.StockOrderId}`" title="open the selected purchase order in a new window" target="_blank">View</a></p>
	 
				<p style="margin-top:var(--unit-2)">
					<label for=notes>Order Notes</label>
					<textarea id=orderNotes rows=5 v-model="order.Notes"></textarea>
				</p>
	
			</div>
			<div>
				<p id="invoiceDatePara">
					<label for=invoiceDate>Invoice Date</label>
					<input id=invoiceDate type=date v-model="order.InvoiceDate" />
				</p>
				<p>
					<label for=deliveryDate>Delivery Date</label>
					<input id=deliveryDate v-model="order.DeliveryDate" />
				</p>
				<p>
					<label for=orderDate>Order date</label>
					<input id=orderDate type=date v-model="order.OrderDate" />
				</p>
				<p>
					<label for=customerOrderNumber>Customer’s order number</label>
					<input id=customerOrderNumber v-model="order.CustomerOrderNumber" />
				</p>
	
			</div>
		</section>
	
	</fieldset>

	<!-- design grid -->
	<fieldset><legend>Design</legend>
		<table class="design-table">
			<thead>
				<tr>
					<th></th>
					<th v-for="location in locations">{{ location }}</th>
				</tr>
			</thead>
			<tbody v-for="(decoration, i) in decorations">
				<tr style="border-top:2px black solid">
					<th>{{ decoration }} design</th>
					<td v-for="location in locations">
						{{ order.designs[`${location}${decoration}DesignName`] }} &ensp;
						<a href=# @click.prevent="onOpenDesignPick(location, decoration)" :title="`select ${decoration} design for ${location}`">
							<span class="fa fa-edit"></span>
						</a>&ensp;
						<a href=# title="delete design" 
								v-if="order.designs[`${location}${decoration}DesignId`]" 
								@click.prevent="onDeleteDesign(location, decoration)">
							<span class="fa fa-trash"></span>
						</a>
					</td>
				</tr>
				<tr v-for="n in 2">
					<th>&emsp;{{ media[i] }} {{ n }}</th>
					<td v-for="location in locations" >
						{{ order.designs[`${location}${media[i]}${n}Name`] }} &ensp;
						<a href=#
								v-if="order.designs[`${location}${decoration}DesignId`] != null" 
								@click.prevent="onOpenMediaPick(decoration, location, media[i], n)" 
								:title="`select ${n==2 ? ' a second' : ''} ${media[i]} for ${location}`" >
							<span class="fa fa-edit"></span>
						</a>&ensp;
						<a href=#
								v-if="order.designs[`${location}${media[i]}${n}Id`]" 
								@click.prevent="onDeleteMedia(order.designs, location, media[i], n)" 
								:title="`delete ${media[i]} for ${location}`" >
							<span class="fa fa-trash"></span>
						</a>
					</td>
				</tr>
				<tr v-if="decoration=='Print'">
					<th>&emsp;Standard</th>
					<td v-for="location in locations" v-html="order.designs[`${location}ScreenStandard`]"></td>
				</tr>
			</tbody>
		</table>
	</fieldset>

	<!-- array of products -->
	<div v-for="(product, i) in order.products" :key="product.GarmentId">
		<template v-if="!product.removed">
			<fieldset>
				<legend>Product (Id:{{ product.GarmentId }}) <span v-if="product.Deleted==1">(deleted)</span></legend>
				<table style="margin-top:1em">
					<tr><th style="width:4em">Code<th>Label<th>Type<th>Colour<th>Notes<th style="width:4em">Sizes
					<tr>
						<td>{{ product.Code }}</td>
						<td>{{ product.Label }}</td>
						<td>{{ product.Type }}</td>
						<td>{{ product.Colour }}</td>
						<td>{{ product.Notes}} </td>
						<td>{{ product.SizeCategory }}</td>
					</tr>
				</table>
		
				<table class="product-size-table"> 
					<tr><th v-for="sz in sizes[product.SizeCategory]">{{ sz.slice(1) }}</th></tr> 
					<tr>
						<td v-for="sz in sizes[product.SizeCategory]">
							<input type="number" min="0" 
									v-model="product[sz]" 
									:ref="`product_${product.GarmentId}_size`"
									@keydown.enter="$refs[`price_${product.GarmentId}`][0].focus()" >
						</td>
					</tr> <!-- todo set class to reduce padding on the td -->
				</table> 
		
				<section style="margin-top:var(--unit)">
					<div>
						<label :for="`price_${product.GarmentId}`">{{ productCount(product) }} products @ Price ($)</label>
						<input inputmode="decimal" pattern="\d*(\.\d{0,2})?" title="Numeric"
								:id="`price_${product.GarmentId}`" 
								:ref="`price_${product.GarmentId}`"
								v-model="product.Price" /> 
					</div>
					<div>
						<label>= Total (for this product)</label>
						<input disabled 
								:value="(productCount(product) * (product.Price ?? 0)).toLocaleString('en-AU', {style: 'currency', currency: 'AUD'})" />
					</div>
				</section>
		
				<section style="margin-top: var(--unit-2)">
					<div>
					<input type="button" value="Change" @click="onAddProduct(product.GarmentId)" />&emsp;
					<input type="reset" value="Remove" @click="product.removed=true" />
				</div>
				<div>
					<details v-if="hasStockWarnings(product)"><!-- todo method for has stock warnings -->
						<summary>Stock Warnings</summary>
						<table>
							<tr>
								<th>Size</th>
								<th>Quantity</th>
								<th>Minimum</th>
							</tr>
							<template v-for="sz in sizes[product.SizeCategory]">
								<tr v-if=" product[`Qty${sz}`] < product[`Min${sz}`] ">
									<td>{{ sz }} </td>
									<td>{{ product[`Qty${sz}`] }}</td>
									<td>{{ product[`Min${sz}`] }}</td>
								</tr>
							</template>
					</table>
					</details>
				</div>
			</section>
		
			</fieldset>
		</template>
	</div>
	<p>
		<input type="button" value="Add product (Alt+P)" accesskey="p" @click="onAddProduct()" />
	</p>

	<p>{{ totalProductCount() }} items = Total Value: {{ totalProductValue().toLocaleString('en-AU', {style: 'currency', currency: 'AUD'}) }}</p>

	<p>
<% if (poweruser || salesrep) { %>
	<p>
		<button @click="saveOrder">Save Order</button> 
		<template v-if="order.OrderId != 0">
			<input type=button id=printJobButton @click="printJobSheet" value="Print Job Sheet" style="margin-left:2em" />
			<input type=submit id=shipOrderButton class="bottom-button yellow-on-black-buttton" @click="shipOrder" value="Ship Order" title="Sets done to true, will no longer display on orders page." style="margin-left:2em" />
			<input type=reset value="Delete Order" @click="deleteOrder" v-if="order.OrderId != 0" style="margin-left:2em"  />
		</template>
	</p>
<% } %>
	</p>


	<!-- auditing info -->
	<div style="display:none">
		<dl style="margin-top:var(--unit-2)">
			<dt>Created by:</dt><dd>{{ order.CreatedBy }}</dd>
			<dt>Created date/time:</dt><dd>{{ order.CreatedDateTime }}</dd>
			<dt>Last modified by:</dt><dd>{{ order.LastModifiedBy }}</dd>
			<dt>Last modified date/time:</dt><dd>{{ order.LastModifiedDateTime }}</dd>
		</dl>
	</div>

	<!-- decoration pick dialog -->
	<dialog id="designDialog" ref="designDialog">
		<h4>Choose {{ designPick.location.toLowerCase() }} {{ designPickDecoration.toLowerCase() }} design </h4>
		<design-pick 
			@design-select="onDesignSelect" 
			ref="designPicker" 
			:location="designPick.location"
			:decoration="designPick.decoration" >
		</design-pick>
		<p>
			<input type="button" value="Close" @click="onCloseDesignPicker" />
		</p>
	</dialog>

	<!-- media pick dialog -->
	<dialog id="mediaDialog" ref="mediaDialog">
		<h4>Choose {{mediaPick.location.toLowerCase()}} {{ mediaPick.medium.toLowerCase() }} {{ mediaPick.position }} </h4>
		<media-pick 
			@media-select="onMediaSelect" 
			ref="mediaPicker" 
			:location="mediaPick.location"
			:medium="mediaPick.medium" 
			:position="mediaPick.position"
			:designid="mediaPick.designid"
		></media-pick> <!-- :decoration="mediaPick.decoration" -->

		<p>
			<input type="button" value="Close" @click="onCloseMediaPicker" />
		</p>
	</dialog>


	<!-- product pick dialog -->
	<dialog ref="productDialog">
		<h4>Choose product </h4>
		<product-pick 
			@product-select="onProductSelect" 
			ref="productPicker" >
		</product-pick>
		<p>
			<input type="button" value="Close" @click="onCloseProductPicker" />
		</p>
	</dialog>


</div> <!--~ end app -->


<dialog id=successDialog style="width: 400px" >
	<h4>Success</h4>
	<p>✅ We have saved the order </p>
	<form method="dialog">
		<button>OK</button>
	</form>
</dialog>


<dialog id=deleteDialog>
	<form method="dialog">
		<h4>Order Deleted</h3>
		<p>We have deleted the order.</p>
		<p><a href=/order/deleted>Undo</a> (but does not restore garment details)</p>
		<button>OK</button>
	</form>
</dialog>




<hr>

<p><input type="button" class="bottom-button" onclick="window.location.href='/order2/edit'" value="New Order" title="start a new order"></p>



<script type="module">

import { createApp, ref, reactive, computed } from "vue"
import CustomerPick from "customerPick"
import DesignPick from "designPick"
import MediaPick from "mediaPick"
import ProductPick from "productPick"

createApp ({
	components: {
		CustomerPick,
		DesignPick,
		MediaPick,
		ProductPick
	},
	setup () {
		const locations = <%- JSON.stringify(locations) %>;
		const decorations = <%- JSON.stringify(decorations) %>;
		const media = <%- JSON.stringify(media) %>;
		const sizes = <%- JSON.stringify(sizes) %>;

		const customerDetails = ref(null) // <%# uses ref attribute of details element that contains component %>
		const customerPick = ref(null)    // <%# uses ref attribute of customer pick component %>
		const customerInfo = ref(null)    // <%# uses ref attribute of element, div that contains customer name and component %>

		const designDialog = ref(null) // <%# uses ref attribute of designDialog element %>
		const designPick = reactive({
			location: "",
			decoration: ""
		})
		const designPickDecoration = ref("")
		const designPicker = ref(null)    // <%# uses ref attribute of element, the <design-pick> %>

		const mediaDialog = ref(null) // <%# uses ref attribute of designDialog element %>
		const mediaPicker = ref(null) // <%# uses ref attribute of element, the <media-pick> %>
		const mediaPick = reactive({
			location: "",
			medium: "",
			position: 0,
			designid: 0
		})

		const productDialog = ref(null) // uses ref attribute of productDialog element 
		const productPicker = ref(null) // uses ref attribute of element, the <product-pick> 

		const order = reactive(<%- JSON.stringify(order) %>)
		const orderNumberInput = ref(null) // ref(null) is for an element of same name, 
		const salesReps = ref(<%- JSON.stringify(salesReps) %>)
		const purchaseOrders = ref(<%- JSON.stringify(purchaseOrders) %>)

		const productChangeId = ref(0)

		return {
			locations,
			decorations,
			media,
			sizes,
			salesReps,
			order,
			designPickDecoration,
			designPick,
			mediaPick,
			productChangeId,
			purchaseOrders,
		}
	},
	methods: {
		onCustomerSelect(selected) { // callback function when customer is chosen
			this.order.customer = selected
			this.order.CustomerId = selected.CustomerId
			this.$refs.customerDetails.removeAttribute("open")
			this.$refs.orderNumberInput.focus()
			this.$refs.customerInfo.scrollIntoView({behavior:"smooth"})
		},
		onCustomerDetailsToggle() {
			if (this.$refs.customerDetails.open)
				this.$refs.customerPick.receiveFocus()
		},
		onOpenDesignPick(location, decoration) {
			this.designPick.location = location
			this.designPick.decoration = decoration
			this.$refs.designDialog.showModal()
		},
		onOpenMediaPick(decoration, location, medium, pos) { 
			this.mediaPick.position = pos
			this.mediaPick.location = location
			this.mediaPick.medium = medium
			this.mediaPick.designid = this.order.designs[`${location}${decoration}DesignId`]
			this.$refs.mediaDialog.showModal()
			this.$nextTick(() => this.$refs.mediaPicker.fetch())
		},
		onDeleteMedia(product, location, medium, n) {
			product[`${location}${medium}${n}Id`] = null
			product[`${location}${medium}${n}Name`] = ""
		},

		onDesignSelect(design) {
			//set the selected design id and name
			this.order.designs[`${design.location}${design.decoration}DesignId`]  = design[`${design.decoration}DesignId`]
			this.order.designs[`${design.location}${design.decoration}DesignName`] = `${design.Code} ${design.Notes}`

			// initialise the medium (screen, usb, transfername)
			const medium = this.media[this.decorations.indexOf(design.decoration)];
			[1,2].forEach(n => {
				this.order.designs[`${design.location}${medium}${n}Id`]   = null
				this.order.designs[`${design.location}${medium}${n}Name`] = null
			})
			this.$refs.designDialog.close()

			if (design.decoration == "Print") {
				// fetch the standard screens for display
				// todo empty this if delete is clicked
				fetch(`/print/${design.PrintDesignId}/standardscreens`)
				.then(response => response.json())
				.then(json => this.order.designs[`${design.location}ScreenStandard`] = json.join("<br />"))
				.catch(err => console.error(err))
			}
			//todo, if there is only one media item for the design, load it up
		},
		onCloseDesignPicker() {
			// we clear this one, because it is reused by the other decorations
			this.$refs.designPicker.clear()
			this.$refs.designDialog.close() 
		},
		onDeleteDesign(location, decoration) {
			console.log("delete design", location, decoration)
			// get product 0; remove the decoration design; remove the media
			this.order.designs[`${location}${decoration}DesignId`] = null
			this.order.designs[`${location}${decoration}DesignName`] = ""
			const medium = this.media[this.decorations.indexOf(decoration)];
			[1,2].forEach(n => {
				this.order.designs[`${location}${medium}${n}Id`] = null
				this.order.designs[`${location}${medium}${n}Name`] = ""
			})
			// set standard (unnamed) screens to empty
			this.order.designs[`${location}ScreenStandard`] = ""
		},


		onMediaSelect(media) {
			this.order.designs[`${media.location}${media.medium}${media.position}Id`] = media.id
			this.order.designs[`${media.location}${media.medium}${media.position}Name`] = media.name
			this.onCloseMediaPicker()
		},
		onCloseMediaPicker() {
			this.$refs.mediaDialog.close() 
		},
		onCloseProductPicker() {
			this.$refs.productDialog.close() 
		},
		onProductSelect(product) {
			this.$refs.productDialog.close()

			if (this.productChangeId) {
				// find the product with the id which is the one we are changing
				const myProduct = this.order.products.find(p => p.GarmentId == this.productChangeId)
				// reset its properties
				myProduct.GarmentId = product.GarmentId
				myProduct.Code = product.Code
				myProduct.Label = product.Label
				myProduct.Type = product.Type
				myProduct.Colour = product.Colour
				myProduct.Notes = product.Notes

				if (myProduct.SizeCategory != product.SizeCategory) {
					// reset all sizes
					for (let category in this.sizes) 
						for (let size of this.sizes[category])
							myProduct[size] = 0
				}
				myProduct.SizeCategory = product.SizeCategory
			}
			else { // it's a new product to be added
				product.added = true
				this.order.products.push(product)
				this.$nextTick(function() {
					this.$refs[`product_${product.GarmentId}_size`][0].scrollIntoView({behavior: "smooth"})
					this.$refs[`product_${product.GarmentId}_size`][0].focus()

				})
			}
		},

		onAddProduct(productId) {
			this.productChangeId = productId ? productId : 0
			this.$refs.productDialog.showModal()
		},

		productCount(product) {
			const count = this.sizes[product.SizeCategory].reduce((acc, curr) => { 
				return product[curr] + acc
			}, 0)
			return count
		},
		totalProductCount()  {
			let sum = 0
			this.order.products.forEach( product => {
				const count = this.sizes[product.SizeCategory].reduce((acc, curr) => { 
					return product[curr] + acc
				}, 0)
				sum += count
			})
			return sum
		},
		totalProductValue () {
			let sum = 0
			this.order.products.forEach( product => {
				const count = this.sizes[product.SizeCategory].reduce((acc, curr) => { 
					return product[curr] + acc
				}, 0)
				sum += count * product.Price || 0
			})
			return sum
		},
		hasStockWarnings(product) {
			for (let size of this.sizes[product.SizeCategory]) {
				if (product[`Qty${size}`] < product[`Min${size}`])
					return true
			}
			return false
		},
		async onPurchaseOrderSelect() {
			console.log("stockorderid", this.order.StockOrderId)
			try {
				this.order.products = await (await fetch(`/stockorder/${this.order.StockOrderId}/products`)).json()
				this.order.products.forEach(p => p.added = true)
			}
			catch(err) {
				console.error(err)
			}
		}, //~ onPurchaseOrderSelect
		saveOrder() {
			let method = "POST"
			let url = "/order2"
			if (this.order.OrderId > 0) {
				method = "PUT"
				url += `/${this.order.OrderId}`
			}

			fetch(url, {
				method,
				headers: new Headers({ "Content-Type": "application/json" }),
				body: JSON.stringify({
					order: this.order, 
					designs: this.order.designs
				})
			})
			.then(response => {
				if (! response.ok) {
					// todo show error dialog and quit
					throw response.statusText
				}
				return response.json()
			})
			.then(json => {
				if (json.errors) {
					throw json.errors
				}
				if (method == "POST") { // new
					this.order.OrderId = json.OrderId
					this.order.CreatedBy = json.CreatedBy
					this.order.CreatedDateTime = json.CreatedDateTime
					this.order.LastModifiedBy = json.LastModifiedBy
					this.order.LastModifiedDateTime = json.LastModifiedDateTime
				}
				else { // method == "PUT", edit
					this.order.LastModifiedBy = json.LastModifiedBy
					this.order.LastModifiedDateTime = json.LastModifiedDateTime
				}

				document.getElementById("successDialog").showModal()

				// refetch products
				fetch(`/order2/products/${this.order.OrderId}`)
				.then(r => r.json())
				.then(json => {
					this.order.products = json
				})
				.catch(err => window.alert("We encountered an error fetching the updated products: " + err))


			})
			.catch(err => {
				let msg = ""
				if (typeof err == "string")
					msg = err
				else if (typeof err == "Array")
					msg = err.join(";\n ")

				window.alert("we encountered an error:\n " + err)
			})

		},//~ saveOrder 
		deleteOrder() {
			if (window.confirm("Are you sure you want to delete this order")) {
				fetch(`/order/${this.order.OrderId}`, { method: "DELETE" })
					.then(response => {
						if (response.ok) {
							const deleteDialog = document.getElementById("deleteDialog")
							deleteDialog.addEventListener("close", () => window.location="/order2/edit") 
							deleteDialog.showModal()
						}

						else
							throw new Error(response.statusText)
					})
					.catch(error => alert("We encountered an error: " + error))
			}
		},
		printJobSheet() {
			window.open(`/order/jobsheet/${this.order.OrderId}`)
		},
		shipOrder() {
			console.log("ship")
			fetch(`/order/ship/${this.order.OrderId}`, { method: "PUT" })
			.then(response => {
				if (response.ok) {
					return response.text()
				}
				else {
					throw new Error(response.statusText)
				}
			})
			.then(text => {
				const successDialog = document.getElementById("successDialog")
				successDialog.querySelector("p").textContent = "✅ We have shipped the order"
				successDialog.addEventListener("close", function() {
					window.location.href=`/order`
				})
				successDialog.showModal()
			})
			.catch(error => window.alert(`We encountered an error: ${error}`)) 
		} //~ end ship order


	},
	computed: {
		formatCustomer ()  {
			return /*html*/`<a href="/customer/edit?id=${this.order.CustomerId}" target="_blank" title="click to view/edit the customer in a new window"> ${this.order.customer.Code} ${this.order.customer.Company}</a> ${this.order.customer.detailsString}`
		}
	}
}).mount("#app")


</script>


<%- include("partials/foot.ejs") %>