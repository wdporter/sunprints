<%- include("partials/head2.ejs") %>


<style>

</style>


<div id="app">

	<fieldset><legend>Order details (Id: {{ order.OrderId }})</legend>

		<!-- customer details -->
		<div style="margin-top:var(--unit-2)" ref="customerInfo">
			<p  v-if="order.CustomerId">
				Customer: <span v-html="formatCustomer">
			</p>
			<details :open="!order.CustomerId" ref="customerDetails" style="margin-top:var(--unit)" @toggle="onCustomerDetailsToggle">
				<summary>Choose customer</summary>
				<customer-pick @customer-select="onCustomerSelect" ref="customerPick"></customer-pick>
			</details>
		</div>

		<!-- order properties -->
		<section>
			<div>
				<p>
					<label for=orderNumber>Order number</label>
					<input id=orderNumber required placeholder=required v-model="order.OrderNumber" :autofocus="order.orderId != 0" ref="orderNumberInput" />
				</p>
				<p>
					<label for="salesRep">Sales Rep.</label>
					<select id="salesRep" required v-model="order.SalesRep">
						<option value="">—Select—</option>
						<option v-for="rep in salesReps" :value="rep">{{ rep }}</option>
					</select>
				</p>
				<p>
					<label for=terms>Terms</label>
					<select id=terms v-model="order.Terms">
						<option value="">—Select—</option>
						<option value="C.O.D.">C.O.D.</option>
						<option value="Net 7 days">Net 7 days</option>
						<option value="Net 30 days">Net 30 days</option>
					</select>
				</p>
				<p style="margin-top:3rem">
					<input id=repeat type=checkbox v-model="order.Repeat" /><label for=repeat>Repeat</label>
					<input id=newDesign type=checkbox v-model="order.New" /><label for=newDesign>New</label>
					<input id=buyIn type=checkbox v-model="order.BuyIn" /><label for=buyIn>Buy In</label>
				</p>
				<p v-if="order.OrderId==0 && order.BuyIn">
					<label for="purchaseSelect">Buy In — choose an existing purchase order to set the products</label>
					<select id="purchaseSelect" v-model="stockOrderId" @change="onPurchaseOrderSelect">
						<option value="">— Select —</option>
						<option v-for="po in purchaseOrders" :value="po.StockOrderId">{{ po.StockOrderId }} {{ po.OrderDate }} {{ po.Company }}</option>

					</select> <a id="viewSelectedPurchaseOrder" :href="`/purchasing?id=${stockOrderId}`" title="open the selected purchase order in a new window" target="_blank">View</a>
					todo change the products array when value changes
				</p>
	 
			</div>
			<div>
				<p id="invoiceDatePara">
					<label for=invoiceDate>Invoice Date</label>
					<input id=invoiceDate type=date v-model="order.InvoiceDate" />
				</p>
				<p>
					<label for=deliveryDate>Delivery Date</label>
					<input id=deliveryDate v-model="order.DeliveryDate" />
				</p>
				<p>
					<label for=orderDate>Order date</label>
					<input id=orderDate type=date v-model="order.OrderDate" />
				</p>
				<p>
					<label for=customerOrderNumber>Customer’s order number</label>
					<input id=customerOrderNumber v-model="order.CustomerOrderNumber" />
				</p>
	
			</div>
			<p style="margin-top:0">
				<label for=notes>Order Notes</label>
				<textarea id=orderNotes rows=5 v-model="order.Notes"></textarea>
			</p>
		</section>
	
	</fieldset>

	<!-- design grid -->
	<fieldset><legend>Design</legend>
		<table class="design-table">
			<thead>
				<tr>
					<th></th>
					<th v-for="location in locations">{{ location }}</th>
				</tr>
			</thead>
			<tbody v-for="(decoration, i) in decorations">
				<tr style="border-top:2px black solid">
					<th>{{ decoration }} design</th>
					<td v-for="location in locations">
						<span v-if="order.products.length > 0">
							{{ order.designs[`${location}${decoration}DesignName`] }}
						</span>&ensp;
						<a href=# @click.prevent="onOpenDesignPick(location, decoration)" :title="`select ${decoration} design for ${location}`">
							<span class="fa fa-edit"></span>
						</a>&ensp;
						<a href=# title="delete design" v-if="order.products.length > 0 && order.designs[`${location}${decoration}DesignId`]" @click.prevent="onDeleteDesign(location, decoration)">
							<span class="fa fa-trash"></span>
						</a>
					</td>
				</tr>
				<tr v-for="n in 2">
					<th>&emsp;{{ media[i] }} {{ n }}</th>
					<td v-for="location in locations" >
						<span v-if="order.products.length > 0">
							{{ order.designs[`${location}${media[i]}${n}Name`] }}
						</span>&ensp;
						<a v-if="order.products.length > 0 && order.designs[`${location}${decoration}DesignId`] != null" href=# @click.prevent="onOpenMediaPick(decoration, location, media[i], n)" :title="`select ${n==2 ? ' a second' : ''} ${media[i]} for ${location}`" >
							<span class="fa fa-edit"></span>
						</a>&ensp;
						<a v-if="order.products.length > 0 && order.designs[`${location}${media[i]}${n}Id`]" href=# @click.prevent="onDeleteMedia(order.designs, location, media[i], n)" :title="`delete ${media[i]} for ${location}`" >
							<span class="fa fa-trash"></span>
						</a>
					</td>
				</tr>
			</tbody>
		</table>
	</fieldset>

	<!-- array of products -->
	<div v-for="(product, i) in order.products" :key="product.GarmentId">
		<template v-if="!product.removed">
			<fieldset>
				<legend>Product Id:{{ product.GarmentId }} <span v-if="product.Deleted==1">(deleted)</span></legend>
				<table style="margin-top:3em">
					<tr><th style="width:4em">Code<th>Label<th>Type<th>Colour<th>Notes<th style="width:4em">Sizes
					<tr>
						<td>{{ product.Code }}</td>
						<td>{{ product.Label }}</td>
						<td>{{ product.Type }}</td>
						<td>{{ product.Colour }}</td>
						<td>{{ product.Notes}} </td>
						<td>{{ product.SizeCategory }}</td>
					</tr>
				</table>
		
				<table style="margin-top:2em">
					<tr><th v-for="sz in sizes[product.SizeCategory]">{{ sz.slice(1) }}</th></tr> 
					<tr><td v-for="sz in sizes[product.SizeCategory]"><input type="number" min="0" v-model="product[sz]" :ref="`product_${product.GarmentId}_size`"></td></tr>
				</table> 
		
				<section style="margin-top:var(--unit)">
					<div>
						<label :for="`price_${product.GarmentId}`">{{ productCount(product) }} products @ Price ($)</label>
						<input :id ="`price_${product.GarmentId}` "v-model="product.Price" inputmode="decimal" pattern="\d*(\.\d{0,2})?" title="Numeric" />
					</div>
					<div>
						<label>= $ Total (for this product)</label>
						<input disabled :value="productCount(product) * (product.Price ?? 0)" />
					</div>
				</section>
		
				<p style="margin-top:2em">
					<input type="reset" value="Remove product" 
							@click="product.removed=true"
							:disabled="order.products.length==1" /> 
				</p>
		
			</fieldset>
		</template>
	</div>
<p>{{ totalProductCount() }} items = Total Value: ${{ totalProductValue().toFixed(2) }}</p>
	<p>
		<input type="button" value="Add product" @click="onAddProduct()" />
	</p>


	<!-- auditing info -->
	<p>
	<dl style="margin-top:var(--unit-2)">
		<dt>Created by:</dt><dd>{{ order.CreatedBy }}</dd>
		<dt>Created date/time:</dt><dd>{{ order.CreatedDateTime }}</dd>
		<dt>Last modified by:</dt><dd>{{ order.LastModifiedBy }}</dd>
		<dt>Last modified date/time:</dt><dd>{{ order.LastModifiedDateTime }}</dd>
	</dl>
</p>

	<!-- decoration pick dialog -->
	<dialog id="designDialog" ref="designDialog">
		<h4>Choose {{ designPick.location.toLowerCase() }} {{ designPickDecoration.toLowerCase() }} design </h4>
		<design-pick 
			@design-select="onDesignSelect" 
			ref="designPicker" 
			:location="designPick.location"
			:decoration="designPick.decoration" >
		</design-pick>
		<p>
			<input type="button" value="Close" @click="onCloseDesignPicker" />
		</p>
	</dialog>

	<!-- media pick dialog -->
	<dialog id="mediaDialog" ref="mediaDialog">
		<h4>Choose {{mediaPick.location.toLowerCase()}} {{ mediaPick.medium.toLowerCase() }} {{ mediaPick.position }} </h4>
		<media-pick 
			@media-select="onMediaSelect" 
			ref="mediaPicker" 
			:location="mediaPick.location"
			:medium="mediaPick.medium" 
			:position="mediaPick.position"
			:designid="mediaPick.designid"
		></media-pick> <!-- :decoration="mediaPick.decoration" -->

		<p>
			<input type="button" value="Close" @click="onCloseMediaPicker" />
		</p>
	</dialog>


	<!-- product pick dialog -->
	<dialog ref="productDialog">
		<h4>Choose product </h4>
		<product-pick 
			@product-select="onProductSelect" 
			ref="productPicker" >
		</product-pick>
		<p>
			<input type="button" value="Close" @click="onCloseProductPicker" />
		</p>
	</dialog>

</div> <!--~ end app -->


<script type="module">

import { createApp, ref, reactive, computed } from "vue"
import CustomerPick from "customerPick"
import DesignPick from "designPick"
import MediaPick from "mediaPick"
import ProductPick from "productPick"

createApp ({
	components: {
		CustomerPick,
		DesignPick,
		MediaPick,
		ProductPick
	},
	setup () {
		const locations = <%- JSON.stringify(locations) %>;
		const decorations = <%- JSON.stringify(decorations) %>;
		const media = <%- JSON.stringify(media) %>;
		const sizes = <%- JSON.stringify(sizes) %>;

		const customerDetails = ref(null) // <%# uses ref attribute of details element that contains component %>
		const customerPick = ref(null)    // <%# uses ref attribute of customer pick component %>
		const customerInfo = ref(null)    // <%# uses ref attribute of element, div that contains customer name and component %>

		const onCustomerSelect = function(selected) { // callback function when customer is chosen
			order.customer = selected
			customerDetails.value.removeAttribute("open")
			orderNumberInput.value.focus()
			customerInfo.value.scrollIntoView({behavior:"smooth"})
		}
		const formatCustomer = computed(() => {
			return /*html*/`<a href="/customer/edit?id=${order.CustomerId}" target="_blank" title="click to view/edit the customer in a new window"> ${order.customer.Code} ${order.customer.Company}</a> ${order.customer.detailsString}`
		})

		const designDialog = ref(null) // <%# uses ref attribute of designDialog element %>
		const designPick = reactive({
			location: "",
			decoration: ""
		})
		const designPickDecoration = ref("")
		const designPicker = ref(null)    // <%# uses ref attribute of element, the <design-pick> %>
		const onOpenDesignPick = function(location, decoration) {
			this.designPick.location = location
			this.designPick.decoration = decoration
			this.$refs.designDialog.showModal()
		}

		const mediaDialog = ref(null) // <%# uses ref attribute of designDialog element %>
		const mediaPicker = ref(null) // <%# uses ref attribute of element, the <media-pick> %>
		const mediaPick = reactive({
			location: "",
			medium: "",
			position: 0,
			designid: 0
		})
		const onOpenMediaPick = function(decoration, location, medium, pos) { 
			this.mediaPick.position = pos
			this.mediaPick.location = location
			this.mediaPick.medium = medium
			this.mediaPick.designid = this.order.designs[`${location}${decoration}DesignId`]
			this.$refs.mediaDialog.showModal()
			this.$nextTick(() => this.$refs.mediaPicker.fetch())
		}

		const productDialog = ref(null) // <%# uses ref attribute of productDialog element %>
		const productPicker = ref(null) // <%# uses ref attribute of element, the <product-pick> %>

		const order = reactive(<%- JSON.stringify(order) %>)
		const orderNumberInput = ref(null)
		const salesReps = ref(<%- JSON.stringify(salesReps) %>)
		const purchaseOrders = ref(<%- JSON.stringify(purchaseOrders) %>)
		
		const stockOrderId = ref(0)

		function onCustomerDetailsToggle() {
			if (customerDetails.value.open)
				customerPick.value.receiveFocus()
		}

		function onDeleteDesign(location, decoration) {
			console.log("delete design", location, decoration)
			// get product 0; remove the decoration design; remove the media
			order.designs[`${location}${decoration}DesignId`] = null
			order.designs[`${location}${decoration}DesignName`] = ""
			const medium = this.media[this.decorations.indexOf(decoration)];
			[1,2].forEach(n => {
				order.designs[`${location}${medium}${n}Id`] = null
				order.designs[`${location}${medium}${n}Name`] = ""
			})
		}

		function onDeleteMedia(product, location, medium, n) {
			product[`${location}${medium}${n}Id`] = null
			product[`${location}${medium}${n}Name`] = ""
		}

		function onAddProduct() {
			this.$refs.productDialog.showModal()
		}

		async function onPurchaseOrderSelect () {
			//todo order.products = await fetch (`/stockorder/${stockOrderId.value}`) etc.
		}

		const onOpenProductPick = function() {
			this.$refs.productDialog.showModal()
		}

		return {
			locations,
			decorations,
			media,
			sizes,
			onCustomerSelect,
			customerDetails,
			customerPick,
			customerInfo,
			onCustomerDetailsToggle,
			formatCustomer,
			order,
			orderNumberInput,
			salesReps,
			purchaseOrders,
			stockOrderId,

			designPickDecoration,
			onOpenDesignPick,
			designPicker,
			designPick,
			onDeleteDesign,

			onOpenMediaPick,
			mediaPicker,
			mediaPick,
			onDeleteMedia,

			productDialog,
			productPicker,
			onAddProduct,
		}
	},
	methods: {
		onDesignSelect(design) {
			this.order.designs[`${design.location}${design.decoration}DesignId`]   = design[`${design.decoration}DesignId`]
			this.order.designs[`${design.location}${design.decoration}DesignName`] = `${design.Code} ${design.Notes}`

			const medium = this.media[this.decorations.indexOf(design.decoration)];
			[1,2].forEach(n => {
				this.order.designs[`${design.location}${medium}${n}Id`]   = null
				this.order.designs[`${design.location}${medium}${n}Name`] = null
			})
			this.$refs.designDialog.close()
		},
		onCloseDesignPicker() {
			// we clear this one, because it is reused by the other decorations
			this.$refs.designPicker.clear()
			this.$refs.designDialog.close() 
		},

		onMediaSelect(media) {
			this.order.designs[`${media.location}${media.medium}${media.position}Id`] = media.id
			this.order.designs[`${media.location}${media.medium}${media.position}Name`] = media.name
			this.$refs.mediaDialog.close()
		},
		onCloseMediaPicker() {
			this.$refs.mediaDialog.close() 
		},
		onCloseProductPicker() {
			this.$refs.productDialog.close() 
		},
		onProductSelect(product) {
			product.added = true
			this.order.products.push(product)
			this.$refs.productDialog.close()
			this.$nextTick(function() {
				this.$refs[`product_${product.GarmentId}_size`][0].scrollIntoView({behavior: "smooth"})
				this.$refs[`product_${product.GarmentId}_size`][0].focus()

			})
		},
		productCount(product) {
			const count = this.sizes[product.SizeCategory].reduce((acc, curr) => { 
				return product[curr] + acc
			}, 0)
			return count
		},
		totalProductCount()  {
			let sum = 0
			this.order.products.forEach( product => {
				const count = this.sizes[product.SizeCategory].reduce((acc, curr) => { 
					return product[curr] + acc
				}, 0)
				sum += count
			})
			return sum
		},
		totalProductValue () {
			let sum = 0
			this.order.products.forEach( product => {
				const count = this.sizes[product.SizeCategory].reduce((acc, curr) => { 
					return product[curr] + acc
				}, 0)
				sum += count * product.Price
			})
			return sum

		}
	}

}).mount("#app")


</script>


<%- include("partials/foot.ejs") %>