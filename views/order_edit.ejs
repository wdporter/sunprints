<%- include("partials/head2.ejs") %>


<style>

</style>


<div id="app">

	<fieldset><legend>Order details (Id: {{ order.OrderId }})</legend>

		<!-- customer details -->
		<div style="margin-top:var(--unit-2)" ref="customerInfo">
			<p  v-if="order.CustomerId">
				Customer: <span v-html="formatCustomer">
			</p>
			<details :open="!order.CustomerId" ref="customerDetails" style="margin-top:var(--unit)" @toggle="onCustomerDetailsToggle">
				<summary>Choose customer</summary>
				<customer-pick @customer-select="onCustomerSelect" ref="customerPick"></customer-pick>
			</details>
		</div>

		<!-- order properties -->
		<section>
			<div>
				<p>
					<label for=orderNumber>Order number</label>
					<input id=orderNumber required placeholder=required v-model="order.OrderNumber" :autofocus="order.orderId != 0" ref="orderNumberInput" />
				</p>
				<p>
					<label for="salesRep">Sales Rep.</label>
					<select id="salesRep" required v-model="order.SalesRep">
						<option value="">—Select—</option>
						<option v-for="rep in salesReps" :value="rep">{{ rep }}</option>
					</select>
				</p>
				<p>
					<label for=terms>Terms</label>
					<select id=terms v-model="order.Terms">
						<option value="">—Select—</option>
						<option value="C.O.D.">C.O.D.</option>
						<option value="Net 7 days">Net 7 days</option>
						<option value="Net 30 days">Net 30 days</option>
					</select>
				</p>
				<p style="margin-top:3rem">
					<input id=repeat type=checkbox v-model="order.Repeat" /><label for=repeat>Repeat</label>
					<input id=newDesign type=checkbox v-model="order.New" /><label for=newDesign>New</label>
					<input id=buyIn type=checkbox v-model="order.BuyIn" /><label for=buyIn>Buy In</label>
				</p>
				<p v-if="order.OrderId==0 && order.BuyIn">
					<label for="purchaseSelect">Buy In — choose an existing purchase order to set the products</label>
					<select id="purchaseSelect" v-model="stockOrderId" @change="onPurchaseOrderSelect">
						<option value="">— Select —</option>
						<option v-for="po in purchaseOrders" :value="po.StockOrderId">{{ po.StockOrderId }} {{ po.OrderDate }} {{ po.Company }}</option>

					</select> <a id="viewSelectedPurchaseOrder" :href="`/purchasing?id=${stockOrderId}`" title="open the selected purchase order in a new window" target="_blank">View</a>
					todo change the products array when value changes
				</p>
	 
			</div>
			<div>
				<p id="invoiceDatePara">
					<label for=invoiceDate>Invoice Date</label>
					<input id=invoiceDate type=date v-model="order.InvoiceDate" />
				</p>
				<p>
					<label for=deliveryDate>Delivery Date</label>
					<input id=deliveryDate v-model="order.DeliveryDate" />
				</p>
				<p>
					<label for=orderDate>Order date</label>
					<input id=orderDate type=date v-model="order.OrderDate" />
				</p>
				<p>
					<label for=customerOrderNumber>Customer’s order number</label>
					<input id=customerOrderNumber v-model="order.CustomerOrderNumber" />
				</p>
	
			</div>
			<p style="margin-top:0">
				<label for=notes>Order Notes</label>
				<textarea id=orderNotes rows=5 v-model="order.Notes"></textarea>
			</p>
		</section>
	
	</fieldset>

	<!-- design grid -->
	<fieldset><legend>Design</legend>
		<table class="design-table">
			<thead>
				<tr>
					<th></th>
					<th v-for="location in locations">{{ location }}</th>
				</tr>
			</thead>
			<tbody v-for="(decoration, i) in decorations">
				<tr style="border-top:2px black solid">
					<th>{{ decoration }} design</th>
					<td v-for="location in locations">
						<span v-if="order.products.length > 0">
							{{ order.products[0][`${location}${decoration}DesignName`] }}
						</span>&ensp;
						<a href=# @click.prevent="onOpenDesignPick(location, decoration)" :title="`select ${decoration} design for ${location}`">
							<span class="fa fa-edit"></span>
						</a>&ensp;
						<a href=# title="delete design" v-if="order.products.length > 0 && order.products[0][`${location}${decoration}DesignId`]" >
							<span class="fa fa-trash"></span>
						</a>
					</td>
				</tr>
				<tr v-for="n in 2">
					<th>&emsp;{{ media[i] }} {{ n }}</th>
					<td v-for="location in locations" >
						<span v-if="order.products.length > 0">
							{{ order.products[0][`${location}${media[i]}${n}Name`] }}
						</span>&ensp;
						<a v-if="order.products.length > 0 && order.products[0][`${location}${decoration}DesignId`] != null" href=# @click.prevent="onOpenMediaPick(decoration, location, media[i], n)" :title="`select ${n==2 ? ' a second' : ''} ${media[i]} for ${location}`" >
							<span class="fa fa-edit"></span>
						</a>&ensp;
						<a v-if="order.products.length > 0 && order.products[0][`${location}${media[i]}${n}Id`]" href=# @click.prevent="onDeleteMedia(order.products[0], decoration, location, media[i], n)" :title="`delete ${media[i]} for ${location}`" >
							<span class="fa fa-trash"></span>
						</a>
					</td>
				</tr>
			</tbody>
		</table>
	</fieldset>

	<!-- array of products -->
	<div v-for="(product, i) in order.products" :key="product.GarmentId">
		<fieldset>
			<legend>Product Id:{{ product.GarmentId }} <span v-if="product.Deleted==1">(deleted)</span></legend>
			<table style="margin-top:3em">
				<tr><th style="width:4em">Code<th>Label<th>Type<th>Colour<th>Notes<th style="width:4em">Sizes
				<tr>
					<td>{{ product.Code }}</td>
					<td>{{ product.Label }}</td>
					<td>{{ product.Type }}</td>
					<td>{{ product.Colour }}</td>
					<td>{{ product.Notes}} </td>
					<td>{{ product.SizeCategory }}</td>
				</tr>
			</table>
	
			<table style="margin-top:2em">
				<tr><th v-for="sz in sizes[product.SizeCategory]">{{ sz }}</th></tr> 
				<tr><td v-for="sz in sizes[product.SizeCategory]"><input type="number" min="0" v-model="product[sz]"></td></tr>
			</table> 
	
			<p>
				<label :for="`price_${product.ProductId}`">Price:</label>
				<input :id ="`price_${product.ProductId}` "v-model="product.Price" inputmode="decimal" />
			</p>
	
			<p style="margin-top:2em">
				<input type="button" value="Change product" @click="onChangeProduct(product)" />&emsp;
				<input type="reset" value="Remove product" @click="onRemoveProduct(product.GarmentId)" :disabled="order.products.length==1" /> 
			</p>
	
		</fieldset>
	</div>

	<!-- auditing info -->
	<dl>
		<dt>Created by:</dt><dd>{{ order.CreatedBy }}</dd>
		<dt>Created date/time:</dt><dd>{{ order.CreatedDateTime }}</dd>
		<dt>Last modified by:</dt><dd>{{ order.LastModifiedBy }}</dd>
		<dt>Last modified date/time:</dt><dd>{{ order.LastModifiedDateTime }}</dd>
	</dl>
	
	<!-- decoration pick dialog -->
	<dialog id="designDialog" ref="designDialog">
		<h4>Choose {{designPickLocation.toLowerCase()}} {{ designPickDecoration.toLowerCase() }} design </h4>
		<design-pick 
			@design-select="onDesignSelect" 
			ref="designPick" 
			:location="designPickLocation"
			:decoration="designPickDecoration" >
		</design-pick>
		<p>
			<input type="button" value="Close" @click="onCloseDesignPicker" />
		</p>
	</dialog>

	<!-- media pick dialog -->
	<dialog id="mediaDialog" ref="mediaDialog">
		<h4>Choose {{mediaPickLocation.toLowerCase()}} {{ mediaPickMedia.toLowerCase() }} </h4>
		<media-pick 
			@media-select="onMediaSelect" 
			ref="mediaPick" 
			:location="mediaPickLocation"
			:medium="mediaPickMedium" 
			:designId="mediaPickDesignId"
			:decoration="mediaPickDecoration"
			:position="mediaPickPosition"
		></media-pick>

		<p>
			<input type="button" value="Close" @click="onCloseMediaPicker" />
		</p>
	</dialog>


</div> <!--~ end app -->


<script type="module">

import { createApp, ref, reactive, computed } from "vue"
import CustomerPick from "customerPick"
import DesignPick from "designPick"
import MediaPick from "mediaPick"

createApp ({
	components: {
		CustomerPick,
		DesignPick,
		MediaPick
	},
	setup () {
		const locations = <%- JSON.stringify(locations) %>;
		const decorations = <%- JSON.stringify(decorations) %>;
		const media = <%- JSON.stringify(media) %>;
		const sizes = <%- JSON.stringify(sizes) %>;

		const customerDetails = ref(null) // <%# uses ref attribute of element %>
		const customerPick = ref(null)    // <%# uses ref attribute of element %>
		const customerInfo = ref(null)    // <%# uses ref attribute of element %>

		const onCustomerSelect = function(selected) {
			order.value.customer = selected
			customerDetails.value.removeAttribute("open")
			orderNumberInput.value.focus()
			customerInfo.value.scrollIntoView({behavior:"smooth"})
		}
		const formatCustomer = computed(() => {
			return `<a href="/customer/edit?id=${order.value.CustomerId}" target="_blank" title="click to view/edit the customer in a new window"> ${order.value.customer.Code} ${order.value.customer.Company}</a> ${order.value.customer.detailsString}`
		})

		const designDialog = ref(null) // <%# uses ref attribute of designDialog element %>
		const designPickLocation = ref("")
		const designPickDecoration = ref("")
		const designPick = ref(null)    // <%# uses ref attribute of element, the <design-pick> %>
		const onOpenDesignPick = function(location, decoration) {
			this.designPickLocation = location
			this.designPickDecoration = decoration
			this.$refs.designDialog.showModal()
		}

		const mediaDialog = ref(null) // <%# uses ref attribute of designDialog element %>
		const mediaPickLocation = ref("")
		const mediaPickMedia = ref("")
		const mediaPickDecoration = ref("")
		const mediaPickDesignId = ref(0)
		const mediaPickPosition = ref(1)
		const mediaPick = ref(null)    // <%# uses ref attribute of element, the <media-pick> %>
		const onOpenMediaPick = function(decoration, location, media, pos) { 
			this.mediaPickLocation = location
			this.mediaPickMedia = media
			this.mediaPickDecoration = media
			this.mediaPickDesignId = this.products[0][`${location}${media}DesignId`]
			this.mediaPickPosition = pos
			this.$refs.mediaDialog.showModal()
		}


		const order = ref(<%- JSON.stringify(order) %>)
		const orderNumberInput = ref(null)
		const salesReps = ref(<%- JSON.stringify(salesReps) %>)
		const purchaseOrders = ref(<%- JSON.stringify(purchaseOrders) %>)
		
		const stockOrderId = ref(0)

		function onCustomerDetailsToggle() {
			if (customerDetails.value.open)
				customerPick.value.receiveFocus()
		}

		async function onPurchaseOrderSelect () {
			//todo order.value.products = await fetch (`/stockorder/${stockOrderId.value}`) etc.
		}

		return {
			locations,
			decorations,
			media,
			sizes,
			onCustomerSelect,
			customerDetails,
			customerPick,
			customerInfo,
			onCustomerDetailsToggle,
			formatCustomer,
			order,
			orderNumberInput,
			salesReps,
			purchaseOrders,
			stockOrderId,

			designPickLocation,
			designPickDecoration,
			onOpenDesignPick,
			designPick,

			mediaPickLocation,
			mediaPickMedia,
			mediaPickDecoration,
			mediaPickDesignId,
			mediaPickPosition,

			onOpenMediaPick,
			mediaPick
		}
	},
	methods: {
		onDesignSelect(design) {
			this.order.products[0][`${design.location}${design.decoration}DesignId`]   = design.PrintDesignId
			this.order.products[0][`${design.location}${design.decoration}DesignName`] = `${design.Code} ${design.Notes}`

			const medium = this.media[this.decorations.indexOf(design.decoration)];
			[1,2].forEach(n => {
				this.order.products[0][`${design.location}${medium}${n}Id`]   = null
				this.order.products[0][`${design.location}${medium}${n}Name`] = null
			})
			this.$refs.designDialog.close()
		},
		onCloseDesignPicker() {
			// we clear this one, because it is reused by the other decorations
			this.$refs.designPick.clear()
			this.$refs.designDialog.close() 
		},

		onMediaSelect(media) {
			[1,2].forEach(n => {
				this.order.products[0][`${media.location}${media.medium}${n}Id`]   = null
				this.order.products[0][`${media.location}${media.medium}${n}Name`] = null
			})

			this.$refs.mediaDialog.close()
		},
		onCloseMediaPicker() {
			// we clear this one, because it is reused by the other decorations
			this.$refs.mediaPick.clear()
			this.$refs.mediaDialog.close() 
		}

	}

}).mount("#app")


</script>


<%- include("partials/foot.ejs") %>