<%- include("partials/head.ejs") %>


<style>
	.design-table th {
		text-align: center;
	}
	.dialog-table {
		min-width: unset;
		width: unset;
	}
	.dialog-table tbody tr:hover {
		background-color: aliceblue;
	}
</style>

<script id="orderDetails" type="application/json"><%- JSON.stringify(order) %></script>
<script id="customers" type="application/json"><%- JSON.stringify(customers) %></script>
<script id="salesReps" type="application/json"><%- JSON.stringify(salesReps) %></script>
<script id="sizes" type="application/json"><%- JSON.stringify(sizes) %></script>
<script id="allSizes" type="application/json"><%- JSON.stringify(allSizes) %></script>


<div id="app">


<fieldset><legend>Order Id: {{ order.OrderId }}</legend>

<p>
<label for=OrderNumber>Order Number:</label>
<input id=OrderNumber v-model="order.OrderNumber" required />
</p>

<p><label for=CustomerId>Customer:</label>
<select id=CustomerId v-model="order.CustomerId">
<option v-for="c in customers" :value="c.CustomerId">{{ c.Company }}</option>
</select>
</p>

<p><label for=CustomerOrderNumber>Customer Order Number:</label><input id=CustomerOrderNumber v-model="order.CustomerOrderNumber" />
</p>

<p>
<label for=SalesRep>Sales Rep:</label>
<select id=SalesRep v-model=order.SalesRep >
<option v-for="sr in salesReps">{{ sr }}</option>
</select>
</p>

<p>
<label for=OrderDate>Order Date:</label>
<input id=OrderDate type=date v-model="order.OrderDate" required />
</p>

<p style="padding-top:1em">
	<input type=checkbox id=Repeat v-model="order.Repeat" true-value="1" false-value="0" />
	<label for=Repeat>Repeat</label>
	<input type=checkbox id=New name=New v-model="order.New" true-value="1" false-value="0" />
	<label for=New>New</label>
	<input type=checkbox id=BuyIn v-model="order.BuyIn" true-value="1" false-value="0" />
	<label for=BuyIn>Buy In</label>
</p>

<p>
	<label for=Terms>Terms:</label>
	<select id=Terms v-model="order.Terms">
		<optgroup v-if="order.Terms != 'C.O.D.' && order.Terms != 'Net 7 days' && order.Terms != 'Net 30 days'" label="Standard">
			<option>C.O.D.</option>
			<option>Net 7 days</option>
			<option>Net 30 days</option>
		</optgroup>
		<template v-else>
			<option>C.O.D.</option>
			<option>Net 7 days</option>
			<option>Net 30 days</option>
		</template>
		<optgroup v-if="order.Terms != 'C.O.D.' && order.Terms != 'Net 7 days' && order.Terms != 'Net 30 days'" label="Non-standard">
			<option>{{ order.Terms }} </option>
		</optgroup>
	</select>
</p>

<p>
<label for=Delivery>Delivery:</label>
<input id=Delivery v-model="order.Delivery" />
</p>

<p>
<label for=Notes>Notes:</label>
<textarea rows=5 id=Notes v-model="order.Notes"></textarea>
</p>

<p>
<label for=DateProcessed>Processed Date:</label>
<input id=DateProcessed type=date v-model="order.DateProcessed" required />
</p>

<p>
<label for=DateInvoiced>Invoiced Date:</label>
<input id=DateInvoiced type=date v-model="order.DateInvoiced" />
</p>

</fieldset>

<fieldset><legend>Design</legend>
	<table class="design-table">
		<tr><th></th><th v-for="loc in locations">{{ loc }}</th></tr>
		<tbody v-for="(dec, i) in decorations">
			<tr style="border-top:2px black solid">
				<th>{{ dec }} design</th>
				<td v-for="loc in locations" :style="{textAlign: order.Products[0][`${loc}${dec}DesignId`] == null ? 'center' : 'left' }">
					{{ order.Products[0][`${loc}${dec}DesignName`] }} 
					<a href=# @click.prevent="onSelectDesign(order.Products[0], dec, loc)" title="select design"><span class="fa fa-edit"></span></a>&nbsp;
					<a href=# title="delete design" v-if="order.Products[0][`${loc}${dec}DesignId`]" ><span class="fa fa-trash"></span></a>
				</td>
			</tr>
			<tr>
				<th>{{ media[i] }} 1</th>
				<td v-for="loc in locations" :style="{textAlign: order.Products[0][`${loc}${media[i]}1Id`] == null ? 'center' : 'left' }">
					{{ order.Products[0][`${loc}${media[i]}1Name`] }} 
					<a href=# @click.prevent="onSelectMedia(order.Products[0], dec, loc, media[i], 1)" :title="`select ${media[i]}`" v-if="order.Products[0][`${loc}${dec}DesignId`] != null">
						<span class="fa fa-edit"></span>
					</a>&nbsp;
					<a href=# @click.prevent="onDeleteMedia(order.Products[0], dec, loc, media[i], 1)" :title="`delete ${media[i]}`" v-if="order.Products[0][`${loc}${media[i]}1Id`]">
						<span class="fa fa-trash"></span>
					</a>
				</td>
			<tr>
				<th>{{ media[i] }} 2</th>
				<td v-for="loc in locations" :style="{textAlign: order.Products[0][`${loc}${media[i]}2Id`] == null ? 'center' : 'left' }">
					{{ order.Products[0][`${loc}${media[i]}2Name`] }} 
					<a href=# @click.prevent="onSelectMedia(order.Products[0], dec, loc, media[i], 2)" :title="`select ${media[i]}`" v-if="order.Products[0][`${loc}${dec}DesignId`] != null">
						<span class="fa fa-edit"></span>
					</a>&nbsp;
					<a href=# @click.prevent="onDeleteMedia(order.Products[0], dec, loc, media[i], 2)" :title="`delete ${media[i]}`" v-if="order.Products[0][`${loc}${media[i]}2Id`]">
						<span class="fa fa-trash"></span>
					</a>
				</td>
			
		</tbody>
	</table>

</fieldset>

<fieldset v-for="(product, i) in order.Products" :key="product.GarmentId">
	<legend>Product Id:{{ product.GarmentId }} <span v-if="product.Deleted==1">(deleted)</span></legend>


	<table style="margin-top:3em">
		<tr><th style="width:4em">Code<th>Label<th>Type<th>Colour<th>Notes<th style="width:4em">Sizes
		<tr>
			<td>{{ product.Code }}</td>
			<td>{{ product.Label }}</td>
			<td>{{ product.Type }}</td>
			<td>{{ product.Colour }}</td>
			<td>{{ product.Notes}} </td>
			<td>{{ product.SizeCategory }}</td>
		</tr>
	</table>

	<table style="margin-top:3em">
		<tr><th v-for="sz in sizes[product.SizeCategory]">{{ sz }}</th></tr>
		<tr><td v-for="sz in sizes[product.SizeCategory]"><input type="number" min="0" v-model="product[sz]"></td></tr>
	</table>

	<p>
		<input type="button" value="Change product" @click="onChangeProduct(product)" />&emsp;
		<input type="reset" value="Remove product" @click="onRemoveProduct(product.GarmentId)" /> 
	</p>

</fieldset>

<input type="button" value="Add new product" @click="onAddNewProduct" />&emsp;
<input type="submit" value="Save changes" :disabled = "order.Products.length == 0" />

<dialog ref="selectMediaDialog" style="max-width: var(--measure);">
	<h3>Select {{ mediaSearch.currentMedia }} </h3>
	<table class="dialog-table">
		<thead>
			<tr>
				<th style="width:2em"></th>
				<th v-for="col in mediaSearch.columns[mediaSearch.currentMedia]">{{ col }}</th>
				<th>Sizes</th>
			</tr>
		</thead>
		<tbody>
			<tr v-for="m in mediaSearch.results">
				<td><a href="#" @click.prevent="onMediaSelected(m)">select</a></td>
				<td v-for="col in mediaSearch.columns[mediaSearch.currentMedia]">{{ m[col] }}</td>
				<td>{{ m.SizeCategory }}</td>
			</tr>
		</tbody>
		<tfoot><td colspan=6>{{ mediaSearch.searchMessage }}</td></tfoot>
	</table>
	<p>
		<input type="button" value="Cancel" onclick="this.closest('dialog').close()" />
	</p>
</dialog>

<dialog ref="selectProductDialog" style="max-width: var(--measure);">
	<h3>Select Product</h3>
	<table class="dialog-table">
		<thead>
			<tr>
				<th style="width:2em"></th>
				<th>Code</th>
				<th>Label</th>
				<th>Type</th>
				<th>Colour</th>
				<th>Notes</th>
				<th>Sizes</th>
			</tr>
			<tr>
				<td>
				<td><input pattern="^.{3,}" type=search placeholder="search" @keyup="onSearchProducts($event)" v-model="productSearch.terms.Code" ref="firstProductSearchInput" /></td>
				<td><input pattern="^.{3,}" type=search placeholder="search" @keyup="onSearchProducts($event)" v-model="productSearch.terms.Label" /></td>
				<td><input pattern="^.{3,}" type=search placeholder="search" @keyup="onSearchProducts($event)" v-model="productSearch.terms.Type" /></td>
				<td><input pattern="^.{3,}" type=search placeholder="search" @keyup="onSearchProducts($event)" v-model="productSearch.terms.Colour" /></td>
				<td><input pattern="^.{3,}" type=search placeholder="search" @keyup="onSearchProducts($event)" v-model="productSearch.terms.Notes" /></td>
				<td><select style="width:5em;min-width:unset;" @change="onSearchProducts($event)" v-model="productSearch.terms.SizeCategory"><option v-for="(sizecat, key) in sizes">{{key}}</option></select></td>
			</tr>
		</thead>
		<tbody>
			<tr v-for="p in productSearch.results">
				<td><a href="#" @click.prevent="onProductSelect(p.GarmentId)">select</a></td>
				<td>{{ p.Code }}</td>
				<td>{{ p.Label }}</td>
				<td>{{ p.Type }}</td>
				<td>{{ p.Colour }}</td>
				<td>{{ p.Notes }}</td>
				<td>{{ p.SizeCategory }}</td>
			</tr>
		</tbody>
		<tfoot><td colspan=6>{{ productSearch.searchMessage }}</td></tfoot>
	</table>
	<p>
		<input type="button" value="Cancel" onclick="this.closest('dialog').close()" />
	</p>
</dialog>

<dialog ref="selectDesignDialog" style="max-width: var(--measure);">
	<h3>Select {{ designSearch.currentDecoration }} Design</h3>
	<table class="dialog-table">
		<thead>
			<tr>
				<th style="width:2em"></th>
				<th v-for="col in designSearch.columns[designSearch.currentDecoration]">{{ col }}</th>
				<th>Sizes</th>
			</tr>
			<tr>
				<td>
				<td v-for="(col, i) in designSearch.columns[designSearch.currentDecoration]" ref="searchDesignInputs" :data-pos="i">
					<input pattern="^.{3,}" type=search placeholder="search" @input="onSearchDesign($event)" v-model="designSearch.terms[col]" />
				</td>
			</tr>
		</thead>
		<tbody>
			<tr v-for="m in designSearch.results">
				<td><a href="#" @click.prevent="onDesignSelected(m)">select</a></td>
				<td v-for="col in designSearch.columns[designSearch.currentDecoration]">{{ m[col] }}</td>
				<td>{{ m.SizeCategory }}</td>
			</tr>
		</tbody>
		<tfoot><td colspan=6>{{ designSearch.searchMessage }}</td></tfoot>
	</table>
	<p>
		<input type="button" value="Cancel" onclick="this.closest('dialog').close()" />
	</p>
</dialog>

</div>


<script>

const order = JSON.parse(document.querySelector("script#orderDetails").textContent)
const customers = JSON.parse(document.querySelector("script#customers").textContent)
const salesReps = JSON.parse(document.querySelector("script#salesReps").textContent)
const sizes = JSON.parse(document.querySelector("script#sizes").textContent)
const allSizes = JSON.parse(document.querySelector("script#allSizes").textContent)


window.vueApp = Vue.createApp({
	data() {
		return {
			order,
			customers,
			salesReps,
			sizes,
			allSizes,
			locations: ["Front", "Back", "Pocket", "Sleeve"],
			decorations: ["Print", "Embroidery", "Transfer"],
			media: ["Screen", "Usb", "TransferName"],
			productSearch: {
				terms: {
					Code: "",
					Label: "",
					Type: "",
					Colour: "",
					Notes: "",
					SizeCategory: ""
				},
				results: [],
				searchMessage: "",
				oldProductId: 0
			},
			mediaSearch: {
				columns: {
					Screen: ["Name", "Number", "Colour" ],
					Usb: ["Number", "Notes"],
					TransferName: ["Name"]
				},
				currentMedia: "", // Screen | Usb | TransferName
				currentDecoration: "", // Print | Embroidery | Transfer
				currentLocation:"", // Front | Back | Pocket | Sleeve
				currentPosition: "", // 1 | 2
				searchMessage: "",
				results: []
			},
			designSearch: {
				terms: {
					Code: "",
					Notes: "",
					Comments: "",
				},
				columns: {
					Print: ["Code", "Notes", "Comments" ],
					Embroidery: ["Code", "Notes", "Comments" ],
					Transfer: ["Code", "Notes"],
				},
				currentDecoration: "", // Print | Embroidery | Transfer
				currentLocation:"", // Front | Back | Pocket | Sleeve
				searchMessage: "",
				results: []
			}
		}
	},
	methods: {
		onChangeProduct(product) {
			this.productSearch.oldProductId = product.GarmentId
			this.productSearch.terms.SizeCategory = product.SizeCategory 
			this.productSearch.results = []
			this.$refs.selectProductDialog.showModal()

			this.$refs.firstProductSearchInput.focus()
		},
		onSearchProducts(event) {
			this.productSearch.searchMessage = ""
			if (event.target.checkValidity()) {
				if (this.productSearch.terms.Code == "" && this.productSearch.terms.Label == "" && this.productSearch.terms.Type == "" && this.productSearch.terms.Colour == "" && this.productSearch.terms.Notes == "") {
					return // don't bother searching if all are blank
				}
				// get our search terms
				const terms = Object.keys(this.productSearch.terms).filter(t => t == "SizeCategory" || this.productSearch.terms[t].length >= 3).map(t => `${t}=${this.productSearch.terms[t]}`).join("&")
				const url = `/sales/productsearch?${encodeURI(terms)}`
				fetch(url)
				.then(response => response.json())
				.then(json => {
					this.productSearch.results = json.data
					if (json.data.length < json.count) {
						this.productSearch.searchMessage = `showing ${json.limit} of ${json.count} results`
					}
					else {
						this.productSearch.searchMessage = `${json.data.length} results returned`
					}
				})
				.catch(err => window.alert(`We encountered an error: ${err}`))
			}
		},
		onProductSelect(garmentId) {

			let selectedProduct = this.productSearch.results.find(r => r.GarmentId == garmentId)

			const existingProduct = this.order.Products.find(p => p.GarmentId == this.productSearch.oldProductId)
			if (!existingProduct) {
				// it's a new product being added
				this.allSizes.forEach(s => selectedProduct[s] = 0 )
				this.order.Products.push(selectedProduct)
			}
			else {
				//it's an edit
				if (existingProduct.SizeCategory != selectedProduct.SizeCategory)
				{
					// when the size category changes, reset all sizes back to 0
					sizes[existingProduct.SizeCategory].forEach(function(s) {
						 existingProduct[s] == 0
					})
				}
				existingProduct.GarmentId = selectedProduct.GarmentId
				existingProduct.Code = selectedProduct.Code
				existingProduct.Label = selectedProduct.Label
				existingProduct.Type = selectedProduct.Type
				existingProduct.Colour = selectedProduct.Colour
				existingProduct.Notes = selectedProduct.Notes
				existingProduct.SizeCategory = selectedProduct.SizeCategory
			}

			this.$refs.selectProductDialog.close()
		},
		onAddNewProduct() {
			this.productSearch.oldProductId = 0
			this.onChangeProduct({
				GarmentId: 0,
				SizeCategory: "Adults"
			})
		},
		onRemoveProduct(garmentId) {
			this.order.Products = this.order.Products.filter(p => p.GarmentId != garmentId)
		},
		onSelectMedia(product, decoration, location, media, position) {

			this.mediaSearch.currentMedia = media
			this.mediaSearch.currentLocation = location
			this.mediaSearch.currentDecoration = decoration
			this.mediaSearch.currentPosition = position

			this.mediaSearch.results = []
			this.$refs.selectMediaDialog.showModal()

			this.mediaSearch.searchMessage = ""

			const designId = this.order.Products[0][`${this.mediaSearch.currentLocation}${this.mediaSearch.currentDecoration}DesignId`]
			const url = `/sales/mediasearch?media=${this.mediaSearch.currentMedia}&location=${this.mediaSearch.currentLocation}&decoration=${this.mediaSearch.currentDecoration}&design=${designId} ` 
			fetch(url)
			.then(response => response.json())
			.then(json => {
				console.log(json)
				this.mediaSearch.results = json.data
				if (json.data.length < json.count) {
					this.mediaSearch.searchMessage = `showing  ${json.count} results` 
				}
				else {
					this.mediaSearch.searchMessage = `${json.data.length} results returned`
				}
			})
			.catch(err => window.alert(`We encountered an error: ${err}`))
			
		},
		onMediaSelected(mediaResult) {
			console.log(mediaResult)

			this.order.Products[0][`${this.mediaSearch.currentLocation}${this.mediaSearch.currentMedia}${this.mediaSearch.currentPosition}Id`] = mediaResult.Id 
			this.order.Products[0][`${this.mediaSearch.currentLocation}${this.mediaSearch.currentMedia}${this.mediaSearch.currentPosition}Name`] = Object.keys(mediaResult).filter(k => k !== "Id").map(k => mediaResult[k]).join(" ")

			this.$refs.selectMediaDialog.close()
		},
		onDeleteMedia(product, decoration, location, media, position)  {
			product[`${location}${media}${position}Id`] = null
			product[`${location}${media}${position}Name`] = ""
		},
		onSelectDesign(product, decoration, location) {
	
			Object.keys(this.designSearch.terms).forEach(t => this.designSearch.terms[t] = "")
			this.designSearch.currentLocation = location
			this.designSearch.currentDecoration = decoration
			this.designSearch.results = []

			this.$refs.selectDesignDialog.showModal()

			this.$nextTick(function() {
				for (td in this.$refs.searchDesignInputs) {
					if (this.$refs.searchDesignInputs[td].dataset.pos == 0) {
						this.$refs.searchDesignInputs[td].querySelector("input").focus()
						break
					}
				}
			})
		},
		onSearchDesign(event) {
			this.designSearch.searchMessage = ""
			if (event.target.checkValidity()) {
				// check we have at least one search term
				let isEmpty = true
				for (col of this.designSearch.columns[this.designSearch.currentDecoration]) {
					isEmpty = isEmpty && this.designSearch.terms[col] == ""
				}
				if (isEmpty) {
					return // don't bother searching if all are blank
				}

				// get our search terms
				const terms = this.designSearch.columns[this.designSearch.currentDecoration]
						.filter(t => this.designSearch.terms[t].length >= 3) // exclude any that aren't valid
						.map(t => `${t}=${this.designSearch.terms[t]}`) // create query string elements
						.join("&")  // join to complete query string
				const url = `/sales/designsearch?decoration=${this.designSearch.currentDecoration}&location=${this.designSearch.currentLocation}&${encodeURI(terms)}`
				
				fetch(url)
				.then(response => {
					if (response.ok)
						return response.json()
					else 
						throw new Error(response.statusText)
				})
				.then(json => {
					console.log(json)
					this.designSearch.results = json.data
					if (json.data.length < json.count) {
						this.designSearch.searchMessage = `showing ${json.limit} of ${json.count} results`
					}
					else {
						this.designSearch.searchMessage = `${json.data.length} results returned`
					}
				})
				.catch(err => window.alert(`We encountered an error: ${err}`))
			}
		},
		onDesignSelected(designResult) {
			const designId = designResult[`${this.designSearch.currentDecoration}DesignId`]
			this.order.Products[0][`${this.designSearch.currentLocation}${this.designSearch.currentDecoration}DesignId`] = designId
			this.order.Products[0][`${this.designSearch.currentLocation}${this.designSearch.currentDecoration}DesignName`] = this.designSearch.columns[this.designSearch.currentDecoration].map(c => designResult[c]).join(" ")
			//todo make sure the two media items are linking to the design, if not remove them
			// search valid media for this print design, make sure it is contained
			const media = this.media[this.locations.indexOf(this.designSearch.Decoration)]
			const vthis = this

			fetch(`/sales/mediasearch/decoration?decoration=${this.designSearch.currentDecoration}&location=${this.designSearch.currentLocation}&id=${designId}`)
			.then(response => response.json())
			.then(json => {
					const mediaIds = json.data.map(m => m[`${json.media}Id`])
					if (!mediaIds.includes(vthis.order.Products[0][`${vthis.designSearch.currentLocation}${json.media}1Id`])) {
						vthis.order.Products[0][`${vthis.designSearch.currentLocation}${json.media}1Id`] = null
						vthis.order.Products[0][`${vthis.designSearch.currentLocation}${json.media}1Name`] = null
					}
					if (!mediaIds.includes(vthis.order.Products[0][`${vthis.designSearch.currentLocation}${json.media}2Id`])) {
						vthis.order.Products[0][`${vthis.designSearch.currentLocation}${json.media}2Id`] = null
						vthis.order.Products[0][`${vthis.designSearch.currentLocation}${json.media}2Name`] = null
					}
			})

			this.$refs.selectDesignDialog.close()

		}
	}
}).mount("#app")


</script>


<%- JSON.stringify(order).replace(/,"/g, ",<br />\"") %>

<%- include("partials/foot.ejs") %>