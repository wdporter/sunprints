<%- include("partials/head.ejs") %>


<h3>Showing currently outstanding orders</h3>

<ul>
	<li><a href="/order/new">Create a new order</a></li>
	<li>Print outstanding orders: <a href=/order/outstanding/print target=_blank>Prints</a>, <a href=/order/outstanding/embroidery target=_blank>Embroidery</a>, <a href=/order/outstanding/transfer target=_blank>Transfers</a>, <a href=/order/outstanding/promo target=_blank>Promo/Sub</a></li> 
	<li style="margin-bottom:3em"><a href=/order/deleted>View deleted orders</a></li>
</ul>

<details>
	<summary>Notes</summary>
	<ul>
		<li>Done: select the Order and click Done. Sets the "done" flag</li>
		<li>Ship: select the order and click Ship. The order is removed from this list, and processed date is set to today, and Done is set if not already</li>
		<li>To add/remove garments, or change details, select the Order and click Edit (or double click)</li>
		<li>The green + plus icon reveals the garments. Standard/Unnamed screens are not shown in this view.</li>
		<li>Deleting an order returns the garment quantities back into stock levels on the garments page</li>
	</ul>
</details>

</main>


<main class="wider">

<table id=orderTable class="display compact">
	<thead>
		<tr>
			<th></th>
			<th>Details</th>
			<th>Order Number</th>
			<th>Updated</th>
			<th>Done</th>
			<th>Customer</th>
			<th>Customer<br>Order<br>Number</th>
			<th>Order Date</th>
			<th>Invoice Date</th>
			<th>Repeat</th>
			<th>New</th>
			<th>Buy In</th>
			<th>Done</th>
			<th>Terms</th>
			<th>Sales<br />Rep.</th>
			<th>Notes</th>
			<th>Delivery Date</th>
			<!-- no longer used <th>Processed Date</th> -->
			<th>Designs</th>
		</tr>
	</thead>
	<tbody></tbody>
</table>

</main>

<main>


<script>

		var sizes = <%- allSizes %>

		function format(d) {
			const ret = fetch(`/order/dt/garments/${d.OrderId}`)
				.then(response => {
					if (response.ok)
						return response.json()
					else
						throw new Error(response.statusText)
				})
				.then(data => {
					let totalValue = 0;
					let totalQuantity = 0
					var ret = "<div style=display:flex>"
					if (data.length == 0) {
						ret += "<div class=garmentDiv>&emsp;no garments to display&emsp;</div>"
					}
					else {
						for (var item of data) {
							let productValue = 0;
							let productQuantity = 0;
							ret += "<div class=garmentDiv>"
							for (var d in item) {
								if (d == "Product")
									ret += /*html*/`<span class=nowrap><b>Product:</b> ${item[d]}</span><br>`
								else if (d == "Product2")
									ret += /*html*/`<span class=nowrap>${item[d]}</span><br>`
								else if (d == "AS")
									ret += /*html*/`<b>ASm:</b>${item[d]}<br>`
								else
									ret += /*html*/`<b>${d}:</b> ${item[d]}<br>`

								if (sizes.includes(d)) {
									productValue += item[d] * parseFloat(item.Price)
									productQuantity += item[d]
								}
							}
							ret += /*html*/`<b>Quantity:</b> ${productQuantity}<br /><b>Value:</b> ${productValue.toLocaleString('en-AU', {style: 'currency', currency: 'AUD'})}`
							ret += "</div>"
							totalValue += productValue
							totalQuantity += productQuantity
						}
					}
					ret += "</div>"
					ret += /*html*/`<div class=garment-total-value>Total Quantity: ${totalQuantity}; Total Value: ${totalValue.toLocaleString('en-AU', {style: 'currency', currency: 'AUD'})}</div>`
					return ret
				})
				.catch(err => window.alert(`We enountered an error: ${error}`))
			return ret
		}


		window.datatable = new DataTable("#orderTable", {
			dom: "lf<'buttondiv'B>rtip",
			fixedHeader: true,
			processing: true,
			serverSide: true,
			ajax: "/order/dt",
			pageLength: 50,
			language: {
				searchPlaceholder: "number,customer,notes,design"
			},
			buttons: [
				{
					text: "Expand all",
					action: (e, dt, node, config) => {
						if (dt.buttons().text()[0] == "Expand all") {
							Array.from(document.querySelectorAll("td.dt-control")).forEach(function(td) {
								if (!td.closest("tr").classList.contains("shown"))
									$(td).trigger("click")
							})
							dt.buttons(0).text("Collapse all")
						} 
						else if (dt.buttons().text()[0] == "Collapse all") {
							Array.from(document.querySelectorAll("td.dt-control")).forEach(function(td) {
								if (td.closest("tr").classList.contains("shown"))
									$(td).trigger("click")
							})
							dt.buttons(0).text("Expand all")
						}
					}
				},
				{
					text: "Edit",
					attr: {
						title: "double clicking the row will open the editing page"
					},
					action: (e, dt) => {
						var tr = dt.row("tr.selected")
						if (tr.length) {
							window.location.href = `/order/edit?id=${tr.data().OrderId}`
						}
					}
				},
<% if (poweruser || salesrep) { %>
				{
					text: "Done",
					attr: {
						title: "sets the done flag to true"
					},
					enabled: <%= poweruser || salesrep ? "true" : "false" %>,
					action: (e, dt) =>  {
						var tr = dt.row("tr.selected")
						if (tr.length)
							done(tr.data().OrderId)
					}
				},
				{
					text: "Ship",
					attr: {
						title: "removes the order from this list; sets processed date to today; sets done flag"
					},
					action: (e, dt) =>  {
						var tr = dt.row("tr.selected")
						if (tr.length)
							showShipOrderDialog(tr.data().OrderId)
					}
				},
<% } %>
				{
					text: "Print job sheet",
					action: (e, dt) => {
						var tr = dt.row("tr.selected")
						if (tr.length)
							window.open(`/order/jobsheet/${tr.data().OrderId}`)
					}
				},
				{
					text: "Print designs",
					action: (e, dt) => {
						var tr = dt.row("tr.selected")
						if (tr.length)
							window.open(`/order/printdesigns/${tr.data().OrderId}`)
					}
				},
<% if (poweruser || salesrep) { %>
				{
					text: "Delete",
					action: (e, dt) =>  {
						var tr = dt.row("tr.selected")
						if (tr.length)
							deleteOrder(tr.data().OrderId)
					}
				},
<% } %>
			],
			columns: [
				{
					className: "dt-control",
					orderable: false,
					data: null,
					defaultContent: "",
					sortable: false,
					width: "1em"
				},
				{
					data: "OrderId",
					visible: false
				},
				{ 
					data: "OrderNumber",
					width: "4em",
					render(data, type, row) {
						return `<span title="id: ${row.OrderId}">${data}</span>`
					}
			 	},
				{
					data: "Updated",
					visible: false
				},
				{
					data: "Done",
					visible: false
				},
				{ 
					data: "CustomerName",
					render(data, type, row) {
						return `<a href=/customer/edit?id=${row.CustomerId}>${data}</a>`
					}
				},
				{ data: "CustomerOrderNumber", visible: false },
				{
					data: "OrderDate",
					width: "5em",
					render(od) {
						return od ? new Date(Date.parse(od)).toLocaleDateString("en-AU") : ""
					}
				},
				{
					data: "InvoiceDate",
					visible: false
				},
				{
					data: "Repeat",
					className: "alignCentre",
					width: "1em",
					render(r) {
						return r == 0 ? "" : "✔️"
					},
				},
				{
					data: "New",
					className: "alignCentre",
					width: "1em",
					render(n) {
						return n == 0 ? "" : "✔️"
					},
				},
				{
					data: "BuyIn",
					className: "alignCentre",
					width: "1em",
					render(r) {
						return r == 0 ? "" : "✔️"
					},
				},
				{
					data: "Done",
					className: "alignCentre",
					width: "1em",
					render(r) {
						return r == 0 ? "" : "✔️"
					},
				},
				{ data: "Terms", width: "4em" },
				{ data: "SalesRep", width: "4em" },
				{
					data: "Notes",
				},
				{ data: "DeliveryDate", width: "5em"},
				{
					data: "Designs",
					orderable: false,
					render(d) {
						return d.join("<br>")
					}
				}
			],
			order: [[0, "desc"]] // order date
		})

		window.datatable.on("draw", function() {
			window.datatable.buttons(0).text("Expand all")
		})

		// Add event listener for opening and closing details
		$('#orderTable tbody').on('click', 'td.dt-control', onRowClick)

		function onRowClick() {
			var tr = $(this).closest('tr');
			var row = window.datatable.row(tr);

			if (row.child.isShown()) {
				// This row is already open - close it
				row.child.hide();
				tr.removeClass('shown');
			}
			else {
				// Open this row
				let myData = format(row.data())
				myData.then(d => row.child(d).show())
				tr.addClass('shown');
			}
		}



		function ship(id) {
			fetch(`/order/ship/${id}`, { method: "PUT" })
			.then(response => {
				if (response.ok)
					window.datatable.ajax.reload(null, false)
				else
					throw new Error(response.statusText)
			})
			.catch(error => window.alert(`We encountered an error: ${error}`))
		}

		function done(id) {
			fetch(`/order/done/${id}`, { method: "PUT" })
			.then(response => {
				if (response.ok)
					window.datatable.ajax.reload(null, false)
				else
					throw new Error(response.statusText)
			})
			.catch(error => window.alert(`We encountered an error: ${error}`))
		}


		function deleteOrder(id) {

			if (window.confirm(`We will delete this order. Continue?`)) {
				fetch(`/order/${id}`, { method: "DELETE" })
					.then(response => {
						if (response.ok)
							window.datatable.ajax.reload(null, false)
						else
							throw new Error(response.statusText)
					})
					.catch(error => alert("We encountered an error: " + error))
			}
		}


		// to select a row
		$('tbody').on('click', 'tr', function () {
			if ($(this).hasClass('selected')) {
				$(this).removeClass('selected');
			}
			else {
				window.datatable.$('tr.selected').removeClass('selected');
				$(this).addClass('selected');
			}
		})


		// double clicking a row will go straight to the edit page
		$('tbody').on('dblclick', 'tr', function () {
			const id = window.datatable.row(this).data().OrderId
			window.location.href = `/order/edit?id=${id}`
		})

			// navigate with up/down keys
	$("tbody").on("keydown", "tr", function (event) {

		const row = window.datatable.row(this)
		console.log(event)
		let td = null

		switch (event.originalEvent.key) {

			case "ArrowDown": 
				let next = this.nextElementSibling
				if (next != null) {
					if (this.classList.contains("dt-hasChild"))
						next = next.nextElementSibling			
					next.focus()
					next.classList.add("selected")
					this.classList.remove("selected")
				}
				break;
			
			case "ArrowUp":
				let previous = this.previousElementSibling
				if (previous != null) {
					if (previous.getAttribute("tabindex") == null)
						previous = previous.previousElementSibling			
					previous.focus()
					previous.classList.add("selected")
					this.classList.remove("selected")
				}
				break;

			case "ArrowLeft":
			case "ArrowRight":
				onRowClick.call(this)
				break

				case "Enter":
						window.location.href = `/order/edit?id=${$(this).data("id")}`

		}
	})


function showShipOrderDialog(id) {

	var shipAlertDialog = document.getElementById("shipAlertDialog")
	shipAlertDialog.addEventListener("close", (event) => {
		if (shipAlertDialog.returnValue == "ok") {
			ship(id);
		}
	})

	document.getElementById("shipAlertCancelButton").addEventListener("click", (e) => {
		shipAlertDialog.close()
	})
	
	document.getElementById("shipAlertOkButton").addEventListener("click", (event)=> {
		event.preventDefault()
		shipAlertDialog.close("ok")
	})

	shipAlertDialog.showModal()
}

</script>


<dialog id=shipAlertDialog>
	<form method=dialog>
		<p>⚠ Do you want to ship the order?</p>
		<p>
		<button id=shipAlertOkButton>Yes, go ahead</button>&emsp;
		<input type=button formmethod=dialog id=shipAlertCancelButton value="No, cancel" />
		</p>
	</form>
</dialog>

<%- include("partials/foot.ejs") %>