<%- include("partials/head.ejs") %>

<h3>Showing currently outstanding orders</h3>

<ul>
	<li><a href="/order/edit">Create a new order</a></li>
	<li>Print outstanding orders: <a href=/order/outstanding/print target=_blank>Prints</a>, <a href=/order/outstanding/embroidery target=_blank>Embroidery</a>, <a href=/order/outstanding/transfer target=_blank>Transfers</a>, <a href="/order/outstanding/promo?n=Promo" target=_blank>Promo</a>, <a href="/order/outstanding/promo?n=Sub" target=_blank>Sub</a>, <a href="/order/outstanding/promo?n=Plain Stock" target=_blank>Plain Stock</a></li> 
	<li><a href=/order/deleted>View deleted orders</a></li>
</ul>

<details>
	<summary>Notes</summary>
	<ul>
		<li>Done: select the Order and click Done. Sets the “done” flag</li>
		<li>Ship: select the order and click Ship. The order is removed from this list, and processed date is set to today, and Done is set if not already</li>
		<li>To add/remove garments, or change details, select the Order and click Edit (or double click)</li>
		<li>The green + plus icon reveals the garments. Standard/Unnamed screens are not shown in this view.</li>
		<li>Deleting an order returns the garment quantities back into stock levels on the garments page</li>
	</ul>
</details>

</main>


<main class="wider">

<table id=orderTable class="display compact">
	<thead>
		<tr>
			<th></th>
			<th>Details</th>
			<th>Order Number</th>
			<th>Customer</th>
			<th>Order Date</th>
			<th>Repeat</th>
			<th>New</th>
			<th>Buy In</th>
			<th>Done</th>
			<th>Terms</th>
			<th>Region/<br />Rep.</th>
			<th>Notes</th>
			<th>Delivery Date</th>
			<th>Designs</th>
		</tr>
	</thead>
	<tbody></tbody>
</table>

</main>

<main>

<script>

var sizes = <%- allSizes %>;
var locations = <%- JSON.stringify(locations) %>;
var art = <%- JSON.stringify(art) %>;
var regions = <%- JSON.stringify(regions) %>

function format(d) {
	const ret = fetch(`/order/dt/products/${d.OrderId}`)
		.then(response => {
			if (response.ok)
				return response.json()
			else
				throw new Error(response.statusText)
		})
		.then(data => {
			if (data.length == 0) {
				return "<div class=garmentDiv>&emsp;no products on order&emsp;</div>"
			}
			
			let totalValue = 0;
			let totalQuantity = 0

			let ret = /*html*/`<div class=garment-total-value>Total Quantity: ${totalQuantity}; Total Value: ${totalValue.toLocaleString('en-AU', {style: 'currency', currency: 'AUD'})}</div>`

			// from here we will begin to add a table instead
			var tableHtml = /*html*/`<table class=sub-table>
				<thead>
					<tr>
						<th>Design</th>
						<th>Product</th>
						<th>Sizes</th>
						<th class=sub-num>Quantity</th>
						<th class=sub-num>Price</th>
						<th class=sub-num>Value</th>
					</tr>
				</thead>
				<tbody>`;
			totalQuantity = 0;
			totalValue = 0;
			for (var item of data) {
				tableHtml += "<tr>";
				// designs
				tableHtml += "<td>";
				let designMarkup = [];
				locations.forEach(location => {
					art.forEach(a => {
						var properties = [`${location} ${a.decoration} Design`, `${location} ${a.medium} 1`, `${location} ${a.medium} 2`]
						// e.g. [Front Print Design, Front Screen 1, Front Screen 2]
						properties.forEach((property, i) => {
							var prop = property.replace(/\s/g, ""); // the keys have no spaces
							if (item[prop] !== null && item[prop] !== "") {
								designMarkup.push(`<span class=nowrap><span class=subtable-head>${properties[i]}</span>: ` + item[prop] + "</span>");
							}
						});
					});
				});
				tableHtml += designMarkup.join("<br>") + "</td>";
				// products
				tableHtml += `<td>${item.Product}<br />${item.Product2}</td>`;
				// sizes
				var mySizes = sizes.filter(s => item[s] !== 0);
				tableHtml += "<td>" + mySizes.map(s => `<span class=subtable-head>${s == "ASm" ? "AS" : s}</span>:${item[s]}`).join(", ") + "</td>";
				var numberOfProducts = mySizes.reduce( (acc, curr) => acc + item[curr], 0);
				totalQuantity += numberOfProducts;
				tableHtml += `<td class=sub-num>${numberOfProducts}</td>`;
				tableHtml += `<td class=sub-num>${item.Price.toLocaleString("en-AU", {style: "currency", currency: "AUD"})}</td>`;
				var itemValue = item.Price * numberOfProducts;
				tableHtml += `<td class=sub-num>${itemValue.toLocaleString("en-AU", {style: "currency", currency: "AUD"})}</td>`;
				totalValue += itemValue;
				tableHtml += "</tr>";
			}
			tableHtml += `</tbody><tfoot><tr><td colspan=3></td><td class=sub-num>${totalQuantity}</td><td></td><td class=sub-num>${totalValue.toLocaleString("en-AU", {style: "currency", currency: "AUD"})}</td>`;
			tableHtml += "</tfoot></table>";

			return tableHtml;
		})
		.catch(err => window.alert(`We enountered an error: ${err}`))
	return ret
}

		window.datatable = new DataTable("#orderTable", {
			dom: "lf<'buttondiv'B>rtip",
			fixedHeader: true,
			processing: true,
			serverSide: true,
			ajax: "/order/dt",
			pageLength: 50,
			language: {
				searchPlaceholder: "number,customer,notes,design"
			},
			buttons: [
				{
					text: "Expand all",
					action: (e, dt, node, config) => {
						if (dt.buttons().text()[0] == "Expand all") {
							Array.from(document.querySelectorAll("td.dt-control")).forEach(function(td) {
								if (!td.closest("tr").classList.contains("shown"))
									$(td).trigger("click")
							})
							dt.buttons(0).text("Collapse all")
						} 
						else if (dt.buttons().text()[0] == "Collapse all") {
							Array.from(document.querySelectorAll("td.dt-control")).forEach(function(td) {
								if (td.closest("tr").classList.contains("shown"))
									$(td).trigger("click")
							})
							dt.buttons(0).text("Expand all")
						}
					}
				},
				{
					text: "Edit",
					attr: {
						title: "double clicking the row will open the editing page"
					},
					action: (e, dt) => {
						var tr = dt.row("tr.selected")
						if (tr.length) {
							window.location.href = `/order/edit?id=${tr.data().OrderId}`
						}
					}
				},
<% if (poweruser || salesrep) { %>
				{
					text: "Done",
					attr: {
						title: "sets the done flag to true"
					},
					enabled: <%= poweruser || salesrep ? "true" : "false" %>,
					action: (e, dt) =>  {
						var tr = dt.row("tr.selected")
						if (tr.length)
							done(tr.data().OrderId)
					}
				},
				{
					text: "Ship",
					attr: {
						title: "removes the order from this list; sets processed date to today; sets done flag"
					},
					action: (e, dt) =>  {
						var tr = dt.row("tr.selected")
						if (tr.length)
							showShipOrderDialog(tr.data().OrderId)
					}
				},
<% } %>
				{
					text: "Print job sheet",
					action: (e, dt) => {
						var tr = dt.row("tr.selected")
						if (tr.length)
							window.open(`/order/jobsheet/${tr.data().OrderId}`)
					}
				},
				{
					text: "Print designs",
					action: (e, dt) => {
						var tr = dt.row("tr.selected")
						if (tr.length)
							window.open(`/order/printdesigns/${tr.data().OrderId}`)
					}
				},
<% if (poweruser || salesrep) { %>
				{
					text: "Delete",
					action: (e, dt) =>  {
						var tr = dt.row("tr.selected")
						if (tr.length)
							deleteOrder(tr.data().OrderId)
					}
				},
<% } %>
			],
			columns: [
				{
					className: "dt-control",
					orderable: false,
					data: null,
					defaultContent: "",
					sortable: false,
					width: "1em"
				},
				{
					data: "OrderId",
					visible: false
				},
				{ 
					data: "OrderNumber",
					width: "4em",
					render(data, type, row) {
						return `<span title="id: ${row.OrderId}">${data}</span>`
					}
			 	},
				{ 
					data: "CustomerName",
					render(data, type, row) {
						return `${data} <a href=/customer/edit?id=${row.CustomerId}><span class="fa fa-edit fa-lg" style="margin-top:.5em"></span></a>`
					}
				},
				{
					data: "OrderDate",
					width: "5em",
					render(od) {
						return od ? new Date(Date.parse(od)).toLocaleDateString("en-AU") : ""
					}
				},
				{
					data: "Repeat",
					className: "alignCentre",
					width: "1em",
					render(r) {
						return r == 0 ? "" : "✔️"
					},
				},
				{
					data: "New",
					className: "alignCentre",
					width: "1em",
					render(n) {
						return n == 0 ? "" : "✔️"
					},
				},
				{
					data: "BuyIn",
					className: "alignCentre",
					width: "1em",
					render(r) {
						return r == 0 ? "" : "✔️"
					},
				},
				{
					data: "Done",
					className: "alignCentre",
					width: "1em",
					render(r) {
						return r == 0 ? "" : "✔️"
					},
				},
				{ 
					data: "Terms",
					width: "4em"
				},
				{ 
					data: "SalesRep",
					orderable: false,
					width: "3em",
					render(data, type, row) {
						const items = []
						if (row.RegionId)
							items.push(regions.find(r => r.id == row.RegionId).name)
						if (data) 
							items.push(data)
						return items.join("<br>")
					}
				},
				{
					data: "Notes",
				},
				{ data: "DeliveryDate", width: "5em"},
				{
					data: "DesignsDisplay",
					orderable: false,
					render(d) {
						return d.join("<br>")
					}
				}
			],
			order: [[0, "desc"]] // order date
		})

		window.datatable.on("draw", function() {
			window.datatable.buttons(0).text("Expand all")
		})

		// Add event listener for opening and closing details
		$('#orderTable tbody').on('click', 'td.dt-control', onRowClick)

		function onRowClick() {
			var tr = $(this).closest('tr');
			var row = window.datatable.row(tr);

			if (row.child.isShown()) {
				// This row is already open - close it
				row.child.hide();
				tr.removeClass('shown');
			}
			else {
				// Open this row
				let myData = format(row.data())
				myData.then(d => row.child(d).show())
				tr.addClass('shown');
			}
		}



		function ship(id) {
			fetch(`/order/ship/${id}`, { method: "PUT" })
			.then(response => {
				if (response.ok)
					window.datatable.ajax.reload(null, false)
				else
					throw new Error(response.statusText)
			})
			.catch(error => window.alert(`We encountered an error: ${error}`))
		}

		function done(id) {
			fetch(`/order/done/${id}`, { method: "PUT" })
			.then(response => {
				if (response.ok)
					window.datatable.ajax.reload(null, false)
				else
					throw new Error(response.statusText)
			})
			.catch(error => window.alert(`We encountered an error: ${error}`))
		}


		function deleteOrder(id) {

			if (window.confirm(`We will delete this order. Continue?`)) {
				fetch(`/order/${id}`, { method: "DELETE" })
					.then(response => {
						if (response.ok)
							window.datatable.ajax.reload(null, false)
						else
							throw new Error(response.statusText)
					})
					.catch(error => alert("We encountered an error: " + error))
			}
		}


		// to select a row
		$('tbody').on('click', 'tr', function () {
			if ($(this).hasClass('selected')) {
				$(this).removeClass('selected');
			}
			else {
				window.datatable.$('tr.selected').removeClass('selected');
				$(this).addClass('selected');
			}
		})


		// double clicking a row will go straight to the edit page
		$('tbody').on('dblclick', 'tr', function () {
			const id = window.datatable.row(this).data().OrderId
			window.location.href = `/order/edit?id=${id}`
		})

			// navigate with up/down keys
	$("tbody").on("keydown", "tr", function (event) {

		const row = window.datatable.row(this)
		console.log(event)
		let td = null

		switch (event.originalEvent.key) {

			case "ArrowDown": 
				let next = this.nextElementSibling
				if (next != null) {
					if (this.classList.contains("dt-hasChild"))
						next = next.nextElementSibling			
					next.focus()
					next.classList.add("selected")
					this.classList.remove("selected")
				}
				break;
			
			case "ArrowUp":
				let previous = this.previousElementSibling
				if (previous != null) {
					if (previous.getAttribute("tabindex") == null)
						previous = previous.previousElementSibling			
					previous.focus()
					previous.classList.add("selected")
					this.classList.remove("selected")
				}
				break;

			case "ArrowLeft":
			case "ArrowRight":
				onRowClick.call(this)
				break

				case "Enter":
						window.location.href = `/order/edit?id=${$(this).data("id")}`

		}
	})


function showShipOrderDialog(id) {

	var shipAlertDialog = document.getElementById("shipAlertDialog")
	shipAlertDialog.addEventListener("close", (event) => {
		if (shipAlertDialog.returnValue == "ok") {
			ship(id);
		}
	})

	document.getElementById("shipAlertCancelButton").addEventListener("click", (e) => {
		shipAlertDialog.close()
	})
	
	document.getElementById("shipAlertOkButton").addEventListener("click", (event)=> {
		event.preventDefault()
		shipAlertDialog.close("ok")
	})

	shipAlertDialog.showModal()
}

</script>


<dialog id=shipAlertDialog>
	<form method=dialog>
		<p>⚠ Do you want to ship the order?</p>
		<p>
		<button id=shipAlertOkButton>Yes, go ahead</button>&emsp;
		<input type=button formmethod=dialog id=shipAlertCancelButton value="No, cancel" />
		</p>
	</form>
</dialog>

<%- include("partials/foot.ejs") %>